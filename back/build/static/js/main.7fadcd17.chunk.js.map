{"version":3,"sources":["utils/useInput.js","utils/useQuery.js","utils/fetcher.js","utils/ColorTable.js","components/sadariMenu/MobileMenu.js","contexts/memberList.js","components/memberManager/MemberInsert.js","components/memberManager/MemberItem.js","components/memberManager/index.js","utils/Random.js","utils/Timeout.js","components/sadari/EditableText.js","components/sadari/SadariTD.js","components/sadari/index.js","pages/Home.js","pages/Info.js","pages/MainSadari.js","components/once/index.js","pages/Once.js","components/order/OrderItem.js","components/order/index.js","pages/Order.js","pages/Setting.js","components/team/TeamItem.js","components/team/index.js","pages/Team.js","components/seat/SeatCols.js","contexts/Media.js","components/seat/SeatList.js","components/seat/index.js","pages/Seat.js","components/user/UserInsert.js","components/user/UserItem.js","components/user/index.js","pages/User.js","components/question/QuestionItem.js","components/question/index.js","pages/Question.js","MobileApp.js","components/sadariMenu/DesktopMenu.js","DesktopApp.js","App.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","useCallback","e","target","useQuery","URLSearchParams","useLocation","search","fetcher","url","axios","get","withCredentials","then","response","data","ColorTable","ColorTableRaw","getColorById","id","length","SadariMenu","props","visible","setVisible","pcVisible","setPcVisible","toggleVisible","name","password","setLoginError","setExit","preventDefault","trim","post","mutate","catch","err","setTimeout","useEffect","timer","clearTimeout","Sidebar","Pushable","as","Menu","animation","icon","inverted","vertical","size","borderless","width","Item","Link","to","onClick","Icon","Pusher","dimmed","style","minHeight","margin","Image","src","position","padding","Transition","duration","Message","info","header","content","Container","marginTop","children","MemberListContext","createContext","active","once","MemberListProvider","memberList","setMemberList","Provider","useMemberList","useContext","faker","locale","UserInsert","onCreate","onChangeName","setName","onSubmit","firstName","Form","Group","unstackable","Input","placeholder","onChange","Button","fluid","primary","MemberItem","member","isBig","Label","image","color","display","verticalAlign","height","slice","MemberManager","onDelete","filter","onToggle","map","concat","Grid","columns","stackable","relaxed","Row","React","cloneElement","Divider","Column","Segment","secondary","Header","textAlign","index","MemberInsert","href","download","onFileLoaded","fileInfo","newMemberList","row","push","parserOptions","dynamicTyping","skipEmptyLines","negative","getRandomInt","min","max","Math","ceil","floor","random","timeout","delay","Promise","res","EditableInput","inputRef","useRef","inputVisible","setInputVisible","text","setText","onClickOutSide","current","contains","document","addEventListener","removeEventListener","Fragment","ref","SadariTD","vColor","hColor","hstyle","borderBottom","visibility","vstyle","borderLeft","left","MainSadari","members","horizontalCount","connCount","timeouts","lState","setLState","rState","setRState","cover","setCover","isPlaying","setIsPlaying","isOne","setIsOne","resetHandler","a","arr","i","verticalArr","j","node","v","verticalCount","hIndex","vIndex","h","Array","fill","runHandler","order","startId","endId","newRState","newLState","stopHandler","borderWidth","borderColor","textAlignLast","borderSpacing","tableLayout","zIndex","top","centered","horizontal","_","positive","disabled","floated","warning","Info","basic","container","fontSize","bordered","rounded","OrderComponent","activeMemberList","selectedMemberList","unSelectedMemberList","selectedMember","setSelectedMember","onSelect","selectedIndex","selectedId","onReset","raised","stacked","Once","OrderItem","List","Content","avatar","shuffle","array","randomIndex","currentIndex","shuffledData","setShuffledData","onShuffle","divided","Order","Setting","TeamItem","team","teamData","setTeamData","options","setOptions","currentValue","setCurrentValue","onChangeOptions","newOptions","option","key","onSetTeam","result","unit","Dropdown","selection","compact","Team","SeatList","cols","Table","col","Cell","createMedia","breakpoints","sm","lg","MediaContextProvider","Media","rows","block","at","Body","SeatCols","greaterThanOrEqual","setRows","onSetSeat","total","required","UserItem","user","onActivate","onDeActivate","status","UserComponent","useSWR","membersData","patch","delete","maxWidth","QuestionItem","question","defaultQuestion","setQuestion","questionList","setQuestionList","currentMember","setCurrentMember","isOpen","setIsOpen","withMember","setWithMember","textValue","setTextValue","currentQuestion","textValueArray","split","Boolean","Checkbox","checked","label","Modal","onClose","onOpen","open","TextArea","handleTextValue","App","MobileMenu","exact","path","User","Seat","Question","DesktopMenu","MobileApp","DesktopApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7fadcd17.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const handler = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport default useQuery;","import axios from 'axios';\n\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((response) => response.data);\n\nexport default fetcher;","const ColorTable = [\n    'white',\n    'grey',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n]\n\nconst ColorTableRaw = [\n    '#FFFFFF',\n    '#e8e8e8',\n    '#db2828',\n    '#f2711c',\n    '#fbbd08',\n    '#b5cc18',\n    '#21ba45',\n    '#00b5ad',\n    '#2185d0',\n    '#6435c9',\n    '#a333c8',\n    '#e03997',\n    '#a5673f',\n]\n\nconst getColorById = (id) => {\n    return ColorTable[(id % (ColorTable.length - 2)) + 2]\n}\n\nconst getColorRowById = (id) => {\n    return ColorTableRaw[(id % (ColorTable.length - 2)) + 2]\n}\n\nexport default ColorTable\nexport { ColorTableRaw, getColorById, getColorRowById }\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message,\n  Transition,\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\nimport MemberListButton from './MemberListButton'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const [pcVisible, setPcVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible) {\n            setVisible(false)\n    }\n  }\n\n\n  // const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setTimeout(() => {\n        setExit(true)\n      }, 500)\n    });\n}, []);\n\n\nuseEffect(() => {\n  const timer = setTimeout(() => setPcVisible(true), 2000)\n\n  return () => clearTimeout(timer)\n}, [])\n\n// const history = useHistory()\n\n// const goBack = () => {\n//   history.goBack()\n// }\n\n\n\n//   if(exit) {\n//     return <Redirect to=\"/\" />\n//   }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          // onHide={() => setVisible(false)}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n        >\n\n<Menu.Item\n            as={Link}\n            to='/sadari'\n            onClick={toggleVisible}\n          >\n            <Icon name='road' size=\"large\" />\n            사다리 타기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n            onClick={toggleVisible}\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n            onClick={toggleVisible}\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            랜덤 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n            onClick={toggleVisible}\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/seat'\n            onClick={toggleVisible}\n          >\n            <Icon name='street view' size=\"large\" />\n            자리 배치\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/question'\n            onClick={toggleVisible}\n          >\n            <Icon name='question' size=\"large\" />\n            그냥질문지\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/info'\n            onClick={toggleVisible}\n          >\n            <Icon name='info circle' size=\"large\" />\n            이건 뭔가요?\n          </Menu.Item>\n\n\n\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          {/* <Menu fixed='top' inverted borderless> */}\n          <Menu \n            inverted\n            style={{ margin: '10px' }}\n            borderless\n            size='tiny'\n            >\n\n            {/* <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item> */}\n\n<Menu.Item\n            as={Link}\n            to='/'\n          >\n              <Image size='tiny' src='logo.png'></Image>\n            </Menu.Item>\n            {/* <Menu.Item\n            as={Link}\n            to='/order'\n          >\n              순서뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/once'\n          >\n              랜덤뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/team'\n          >\n              팀나누기\n            </Menu.Item> */}\n\n\n\n            <Menu.Menu position='right'>\n\n\n              <Menu.Item\n              onClick={toggleVisible}\n              style={{padding: '1em'}}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0', padding: '0' }}\n              />\n            </Menu.Item>\n\n    \n\n\n            </Menu.Menu>  \n\n          </Menu>\n          \n          {/* <Segment\n            style={{ margin: '10px'}}\n            secondary\n          \n          >\n\n            <Button icon positive>\n              <Icon name='plus' />\n              </Button>\n            \n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            \n          </Segment> */}\n\n          <Transition\n            animation='bounce'\n            duration={1000}\n            visible={pcVisible}\n            >\n\n                    <Message \n                    info \n                    style={{margin:'10px'}} \n                    // onDismiss={() => {setPcVisible(false)\n                    //    console.log('hh')}}\n                    header='PC에서 조금 더 잘보입니다'\n                    content='인터넷 창을 켜고 sadari.app을 쳐보세요'\n                    onClick={() => setPcVisible(false)}\n                    />\n                    </Transition>\n\n\n\n\n\n\n          <Container style={{ marginTop: '2em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n{/* \n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal> */}\n    </>\n  )\n}\n\nexport default SadariMenu;\n","import React, { createContext ,useContext,useState } from 'react'\n\nconst MemberListContext = createContext([\n    {\n        id: 1,\n        name: '철수',\n        active: true,\n        once: false, \n    },\n    {\n        id: 2,\n        name: '영희',\n        active: true,\n        once: false, \n    },\n    {\n        id: 3,\n        name: '민수',\n        active: false,\n        once: false, \n    },\n    {\n        id: 4,\n        name: '수연',\n        active: true,\n        once: false, \n    },\n])\n\nconst MemberListProvider = ({ children }) => {\n    const [memberList, setMemberList] = useState([\n        {\n            id: 1,\n            name: '철수',\n            active: true,\n            once: false, \n        },\n        {\n            id: 2,\n            name: '영희',\n            active: true,\n            once: false, \n        },\n        {\n            id: 3,\n            name: '민수',\n            active: false,\n            once: false, \n        },\n        {\n            id: 4,\n            name: '수연',\n            active: true,\n            once: false, \n        },\n    ])\n    \n    return (\n        <MemberListContext.Provider value={{ memberList, setMemberList}}>\n            {children}\n        </MemberListContext.Provider>\n    )\n}\n\nconst useMemberList = () => useContext(MemberListContext)\n\nexport { MemberListProvider }\n\nexport default useMemberList","import React, { useCallback } from \"react\";\nimport { Form } from \"semantic-ui-react\";\n\nimport faker from \"faker\";\nimport useInput from \"../../utils/useInput\";\n\nfaker.locale = \"ko\";\n\nconst UserInsert = ({ onCreate, memberList }) => {\n  const [name, onChangeName, setName] = useInput(\"\");\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (name) {\n        onCreate(name);\n        setName(\"\");\n      } else {\n        onCreate(faker.name.firstName());\n        setName(\"\");\n      }\n    },\n    [name, memberList]\n  );\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group unstackable>\n        <Form.Input\n          placeholder=\"이름을 입력해 주세요\"\n          value={name}\n          onChange={onChangeName}\n          // fluid\n          width={13}\n          // unstackable\n        />\n        <Form.Button\n          width={3}\n          icon=\"plus\"\n          // unstackable\n          fluid\n          primary\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default UserInsert;\n","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst MemberItem = ({member, onClick, isBig, size}) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n    const shortedName = () => {\n        if (name.length > 5) {\n            return name.slice(0, 5) + '..'\n        }\n        \n        return name\n    }\n\n    return (\n\n        <Label size={size ? size:'small'} image color={color(id, active)} key={id} as='a' \n        onClick={onClick ? () => onClick(id) : {}}\n        style={isBig ? {display: 'table-cell', verticalAlign: 'middle', height: '150px'} : {margin: '0.1em'}}\n        >\n        <img src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n        {shortedName()}\n        \n    </Label>\n\n\n    )\n}\n\nexport default MemberItem","import React, { useCallback } from \"react\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport useMemberList from \"../../contexts/memberList\";\nimport MemberInsert from \"./MemberInsert\";\nimport MemberItem from \"./MemberItem\";\n\nimport CSVReader from \"react-csv-reader\";\n\nconst MemberManager = (props) => {\n  const { memberList, setMemberList } = useMemberList();\n\n  const handleForce = (data, fileInfo) => {\n    const newMemberList = [];\n\n    data.map((row, id) => {\n      newMemberList.push({\n        id,\n        name: row[0],\n        active: true,\n        once: false,\n      });\n    });\n\n    setMemberList(newMemberList);\n  };\n\n  const papaparseOptions = {\n    header: false,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    // transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n  };\n\n  // const [memberList, setMemberList] = useState([\n  //     {\n  //         id: 1,\n  //         name: '철수',\n  //         active: true,\n  //         once: true,\n  //     },\n  //     {\n  //         id: 2,\n  //         name: '영희',\n  //         active: true,\n  //         once: true,\n  //     },\n  //     {\n  //         id: 3,\n  //         name: '민수',\n  //         active: false,\n  //         once: true,\n  //     },\n  //     {\n  //         id: 4,\n  //         name: '수연',\n  //         active: true,\n  //         once: true,\n  //     },\n  // ])\n\n  // const nextId = useRef(5)\n\n  // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  // const onCreate = useCallback(\n  //     (name) => {\n  //         axios\n  //             .post('/api/members', { name })\n  //             .then(() => mutate())\n  //     }, [membersData]\n  // )\n\n  // const onActivate = useCallback(\n  //     (id) => {\n  //         axios\n  //             .patch('/api/members/' + id, { status: 1 })\n  //             .then(() => mutate())\n  //     }, [membersData]\n  // )\n\n  // const onDeActivate = useCallback(\n  //     (id) => {\n  //         axios\n  //             .patch('/api/members/' + id, { status: 0 })\n  //             .then(() => mutate())\n  //     }, [membersData]\n  // )\n\n  // const onDelete = useCallback(\n  //     (id) => {\n  //         axios\n  //             .delete('/api/members/' + id)\n  //             .then(() => mutate())\n  //     }, [membersData]\n  // )\n\n  const onDelete = useCallback(() => {\n    setMemberList(memberList.filter((member) => member.active === true));\n  }, [memberList]);\n\n  const onToggle = useCallback(\n    (id) => {\n      setMemberList(\n        memberList.map((member) =>\n          member.id === id ? { ...member, active: !member.active } : member\n        )\n      );\n    },\n    [memberList]\n  );\n\n  const onCreate = useCallback(\n    (name) => {\n      const member = {\n        id: memberList[memberList.length - 1].id + 1,\n        name,\n        active: true,\n        once: false,\n      };\n      setMemberList(memberList.concat(member));\n    },\n    [memberList]\n  );\n\n  return (\n    <Grid columns=\"equal\" stackable relaxed>\n      <Grid.Row>{React.cloneElement(props.children)}</Grid.Row>\n\n      <Divider />\n\n      <Grid.Row>\n        <Grid.Column>\n          <Segment secondary>\n            <Header as=\"h3\" textAlign=\"center\">\n              참가자 명단 :{\" \"}\n              {memberList.filter((member) => member.active === true).length} 명\n            </Header>\n            <Segment textAlign=\"center\">\n              {memberList\n                .filter((member) => member.active === true)\n                .map((member, index) => (\n                  <MemberItem member={member} onClick={onToggle} key={index} />\n                ))}\n            </Segment>\n\n            <MemberInsert onCreate={onCreate} memberList={memberList} />\n\n            <Divider />\n\n            <Header as=\"h3\" textAlign=\"center\">\n              csv 업로드 [\n              <a href=\"/csv_sample.csv\" download>\n                샘플파일\n              </a>\n              ]\n            </Header>\n\n            <CSVReader\n              //   cssClass=\"react-csv-input\"\n              //   label=\"Select CSV with secret Death Star statistics\"\n              onFileLoaded={handleForce}\n              parserOptions={papaparseOptions}\n              //   style={{width: '100%'}}\n              //   cssInputClass={styles.csvInput}\n            />\n          </Segment>\n        </Grid.Column>\n\n        <Grid.Column>\n          <Segment secondary>\n            <Header as=\"h3\" textAlign=\"center\">\n              대기자 명단 :{\" \"}\n              {memberList.filter((member) => member.active === false).length} 명\n            </Header>\n            <Segment textAlign=\"center\">\n              {memberList\n                .filter((member) => member.active === false)\n                .map((member, index) => (\n                  <MemberItem key={index} member={member} onClick={onToggle} />\n                ))}\n            </Segment>\n\n            <Button negative fluid onClick={() => onDelete()}>\n              대기자 모두 삭제\n            </Button>\n\n            <Message info>\n              <Message.Header>참가자의 상태를 변경하려면?</Message.Header>\n              <p>명단의 이름을 클릭하세요</p>\n            </Message>\n          </Segment>\n        </Grid.Column>\n      </Grid.Row>\n\n      <Divider />\n    </Grid>\n\n    // <Grid>\n    //     <Grid.Column style={{ maxWidth: 1000 }}>\n    //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n    //             사다리 참가자\n    //     </Header>\n    //         <Segment stacked>\n    //             <List\n    //                 // celled\n    //                 divided\n    //                 // selection\n    //                 size=\"massive\"\n    //                 // inverted\n    //                 relaxed\n    //             // verticalAlign=\"middle\"\n    //             >\n    //                 {\n    //                     membersData &&\n    //                     membersData.filter((user) => user.status === 1).map((user) => (\n    //                         <UserItem\n    //                             user={user}\n    //                             key={user.id}\n    //                             onActivate={onActivate}\n    //                             onDeActivate={onDeActivate}\n    //                             onDelete={onDelete}\n    //                         />\n    //                     )\n    //                     )\n    //                 }\n    //             </List>\n    //             <UserInsert onCreate={onCreate} />\n    //         </Segment>\n\n    //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n    //             대기자\n    //     </Header>\n    //         <Segment stacked>\n    //             <List\n    //                 // celled\n    //                 divided\n    //                 // selection\n    //                 size=\"massive\"\n    //                 // inverted\n    //                 relaxed\n    //             // verticalAlign=\"middle\"\n    //             >\n    //                 {\n    //                     membersData &&\n    //                     membersData.filter((user) => user.status === 0).map((user) => (\n    //                         <UserItem\n    //                             user={user}\n    //                             key={user.id}\n    //                             onActivate={onActivate}\n    //                             onDeActivate={onDeActivate}\n    //                             onDelete={onDelete}\n    //                         />\n    //                     )\n    //                     )\n    //                 }\n    //             </List>\n    //         </Segment>\n    //     </Grid.Column>\n    // </Grid>\n  );\n};\n\nexport default MemberManager;\n","\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //최댓값은 제외, 최솟값은 포함\n  }\n\n\nexport { getRandomInt }","const timeout = (delay) => new Promise(res => setTimeout(res, delay))\nexport { timeout }","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Menu,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Feed,\n    Label,\n    Input,\n    Transition\n  } from 'semantic-ui-react'\n\nconst EditableInput = props => {\n  // We use hooks to declare \"initial\" states\n  const inputRef = useRef(null);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [text, setText] = useState(props.text);\n\n  function onClickOutSide(e) {\n    // Check if user is clicking outside of <input>\n    if (inputRef.current && !inputRef.current.contains(e.target)) {\n      setInputVisible(false); // Disable text input\n    }\n  }\n\n  useEffect(() => {\n    // Handle outside clicks on mounted state\n    if (inputVisible) {\n      document.addEventListener(\"mousedown\", onClickOutSide);\n    }\n\n    // This is a necessary step to \"dismount\" unnecessary events when we destroy the component\n    return () => {\n      document.removeEventListener(\"mousedown\", onClickOutSide);\n    };\n  });\n\n  return (\n    <React.Fragment>\n      {inputVisible ? (\n        <input\n          ref={inputRef} // Set the Ref\n          value={text} // Now input value uses local state\n          onChange={e => {\n            setText(e.target.value);\n          }}\n          style={{width:'100%'}}\n        />\n      ) : (\n        <Label onClick={() => setInputVisible(true)}>{text}</Label>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default EditableInput; // We got our component!\n","import React, { useState } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\nimport { ColorTableRaw } from '../../utils/ColorTable'\n\n\nconst SadariTD = ({ vColor, hColor }) => {\n\n  const hstyle = {\n    // zIndex: 1,\n    // height: '100%',\n    width: '100%',\n    // color: 'red',\n    // borderColor: 'red',\n    // border : '0px solid',\n    borderBottom: '8px solid ' + hColor,\n    // borderLeft: '8px solid ' + ColorTable[vColor], \n    // borderBottom: '6px solid ' + undefined, \n    // borderBottom: '6px solid red', \n    // borderWidth: '19px'\n    // left: '50%',\n    position: 'relative',\n    // position: 'absolute',\n    visibility: hColor? 'visible':'hidden',\n    // float: 'left'\n    // transition: 'border-bottom 0.1s'\n  }\n\n  const vstyle = {\n    // zIndex: 2,\n    width: '100%',\n    height: '100%',\n    // width: '8px',\n    // height: '100%',\n    color: 'red',\n    // borderColor: 'red',\n    // borderStyle: 'solid',\n    borderLeft: '8px solid ' + vColor,\n    // borderLeft: '8px solid black', \n    // borderWidth: '19px'\n    left: '50%',\n    position: 'relative',\n    // float:'left',\n    // transition: 'border-left 0.1s'\n  }\n\n  const tdStyle = {\n    padding: '0px',\n    height: '8px',\n  }\n\n  return (\n    <td style={tdStyle}>\n\n      <div style={vstyle}>\n        <div style={hstyle} />\n      </div>\n\n    </td>\n  )\n}\n\nexport default SadariTD;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { Button, Image, Message, Segment } from \"semantic-ui-react\";\n\nimport { ColorTableRaw, getColorRowById } from \"../../utils/ColorTable\";\nimport { getRandomInt } from \"../../utils/Random\";\nimport { timeout } from \"../../utils/Timeout\";\nimport EditableInput from \"./EditableText\";\nimport SadariTD from \"./SadariTD\";\n\nimport faker from \"faker\";\nimport useMemberList from \"../../contexts/memberList\";\nimport MemberItem from \"../memberManager/MemberItem\";\n\nfaker.locale = \"ko\";\n\nconst SADARILENGTH = 60;\n\nconst MainSadari = () => {\n  const { memberList } = useMemberList();\n\n  // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  const members = memberList?.filter((member) => member.active === true);\n  const verticalCount = SADARILENGTH;\n  const horizontalCount = members?.length;\n  const connCount = (horizontalCount - 1) * getRandomInt(3, 6);\n  const timeouts = [];\n\n  const [lState, setLState] = useState([]);\n  const [rState, setRState] = useState([]);\n  const [cover, setCover] = useState(false);\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isOne, setIsOne] = useState(false);\n\n  const resetHandler = useCallback(async (e) => {\n    const arr = [];\n\n    for (let i = 0; i < verticalCount; i++) {\n      let verticalArr = [];\n\n      for (let j = 0; j < horizontalCount; j++) {\n        let node = { v: ColorTableRaw[1] };\n\n        verticalArr.push(node);\n      }\n      arr.push(verticalArr);\n    }\n\n    for (let i = 0; i < connCount; i++) {\n      const [vIndex, hIndex] = [\n        getRandomInt(1, verticalCount - 1),\n        getRandomInt(0, horizontalCount - 1),\n      ];\n\n      if (arr[vIndex - 1][hIndex]?.h || arr[vIndex + 1][hIndex]?.h) {\n        continue;\n      }\n\n      if (hIndex > 0) {\n        if (arr[vIndex][hIndex - 1]?.h) {\n          continue;\n        }\n      }\n\n      if (hIndex < horizontalCount - 1) {\n        if (arr[vIndex][hIndex + 1]?.h) {\n          continue;\n        }\n      }\n\n      arr[vIndex][hIndex].h = ColorTableRaw[1];\n    }\n\n    setLState(arr);\n    setRState(new Array(horizontalCount).fill(null));\n  });\n  // resetHandler()\n\n  useEffect(() => {\n    resetHandler();\n  }, [memberList]);\n\n  // useEffect(() => {\n  //   setRState(lState[verticalCount - 1]?.map((node) => node.v - 2))\n  // }, [lState])\n\n  const runHandler = useCallback(async (order) => {\n    if (members.length < 2) {\n      setIsOne(true);\n      return;\n    }\n\n    setIsOne(false);\n\n    setIsPlaying(true);\n\n    const startId = order || 0;\n    const endId = order + 1 || horizontalCount;\n    const newRState = rState.slice();\n\n    for (let i = startId; i < endId; i++) {\n      const current = { h: i, v: 0, color: getColorRowById(members[i].id) };\n      for (let j = 0; j < verticalCount; j++) {\n        // if (!isPlaying) {\n        //   return\n        // }\n\n        const newLState = lState.slice();\n        newLState[current.v][current.h].v = current.color;\n\n        if (newLState[current.v][current.h - 1]?.h) {\n          current.h = current.h - 1;\n          newLState[current.v][current.h].h = current.color;\n          newLState[current.v][current.h].v = current.color;\n        } else if (newLState[current.v][current.h]?.h) {\n          newLState[current.v][current.h].h = current.color;\n          current.h = current.h + 1;\n          newLState[current.v][current.h].v = current.color;\n        }\n\n        current.v = current.v + 1;\n        setLState(newLState);\n        timeouts.push(await timeout(20));\n      }\n      newRState[current.h] = members[i];\n      setRState(newRState);\n    }\n\n    setIsPlaying(false);\n  });\n\n  const stopHandler = useCallback(async () => {\n    for (let i = 0; i < timeouts.length; i++) {\n      clearTimeout(timeouts[i]);\n    }\n  });\n\n  //   const onCreate = useCallback(\n  //     (name) => {\n  //         axios\n  //             .post('/api/members', { name })\n  //             .then(() => mutate())\n  //     }, [membersData]\n  // )\n\n  // const onDelete = useCallback(\n  //   (id) => {\n  //       axios\n  //           .delete('/api/members/' + id)\n  //           .then(() => mutate())\n  //   }, [membersData]\n  // )\n\n  return (\n    <>\n      <Segment>\n        <table\n          style={{\n            width: \"100%\",\n            borderWidth: \"0px\",\n            borderColor: \"gray\",\n            textAlignLast: \"center\",\n            borderSpacing: \"0px\",\n            padding: \"0px\",\n            tableLayout: \"fixed\",\n          }}\n        >\n          <thead>\n            <tr>\n              {members &&\n                members\n                  .filter((member) => member.active === true)\n                  .map((member, index) => (\n                    <th key={index}>\n                      <MemberItem\n                        member={member}\n                        onClick={() => runHandler(index)}\n                      />\n                    </th>\n                  ))}\n            </tr>\n          </thead>\n          <tbody style={{ position: \"relative\" }}>\n            {cover && (\n              <Image\n                style={{\n                  position: \"absolute\",\n                  zIndex: 4,\n                  width: \"100%\",\n                  height: \"60%\",\n                  top: \"20%\",\n                }}\n                centered\n                src=\"cover.png\"\n              />\n            )}\n\n            {lState.map((horizontal, vIndex) => (\n              <tr key={vIndex} style={{ position: \"relative\" }}>\n                {horizontal.map((node, hIndex) => (\n                  <SadariTD vColor={node.v} hColor={node.h} key={hIndex} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n          <thead>\n            <tr>\n              {rState?.map((member, index) => (\n                <th key={index}>{member && <MemberItem member={member} />}</th>\n              ))}\n            </tr>\n          </thead>\n          <thead>\n            <tr>\n              {members &&\n                members.map((_, index) => (\n                  <th key={index}>\n                    <EditableInput text={index + 1}></EditableInput>\n                  </th>\n                ))}\n            </tr>\n          </thead>\n        </table>\n      </Segment>\n\n      <Segment style={{ width: \"100%\" }}>\n        {!isPlaying && (\n          <Button positive onClick={() => runHandler()}>\n            시작\n          </Button>\n        )}\n        {isPlaying && (\n          <Button disabled negative onClick={() => stopHandler()}>\n            사다리가 진행 중 입니다\n          </Button>\n        )}\n        {!isPlaying && (\n          <Button negative onClick={() => resetHandler()}>\n            리셋\n          </Button>\n        )}\n\n        {!cover && (\n          <Button floated=\"right\" secondary onClick={() => setCover(true)}>\n            가림막 켜기\n          </Button>\n        )}\n\n        {cover && (\n          <Button floated=\"right\" secondary onClick={() => setCover(false)}>\n            가림막 끄기\n          </Button>\n        )}\n\n        {isOne && (\n          <Message warning>\n            <Message.Header>참가자 숫자 오류</Message.Header>\n            <p>참가자 숫자가 부족합니다.</p>\n          </Message>\n        )}\n\n        <Message info>\n          <Message.Header>사다리 타기를 시작하려면</Message.Header>\n          <p>\n            시작 버튼을 누르거나 참가자를 클릭하세요! 당첨 내용을 클릭하면 값을\n            바꿀 수 있습니다!\n          </p>\n        </Message>\n      </Segment>\n    </>\n  );\n};\n\nexport default MainSadari;\n","import React, { useState, useCallback, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Modal,\n    Input,\n    Form,\n    Message\n} from 'semantic-ui-react'\nimport { Link, Redirect } from 'react-router-dom'\nimport useInput from '../utils/useInput'\nimport fetcher from '../utils/fetcher'\nimport axios from 'axios'\nimport useSWR from 'swr'\nimport moment from 'moment'\nimport faker from 'faker'\n\nfaker.locale = \"ko\"\n\nconst Home = () => {\n\n    const { data: userData } = useSWR('/api/auth', fetcher)\n    const { data: usersData, mutate } = useSWR('/api/users', fetcher)\n\n    const [detail, setDetail] = useState(true)\n    const [open, setOpen] = useState(false)\n\n    const [name, onChangeName] = useInput('')\n    const [password, onChangePassword] = useInput('')\n\n    const [signUpError, setSignUpError] = useState(false)\n    const [signUpSuccess, setSignUpSuccess] = useState(false)\n\n    const onSubmit = useCallback(\n        (e) => {\n            e.preventDefault()\n\n            if (!name || !name.trim()) {\n                return\n            }\n\n            setSignUpError(false)\n            setSignUpSuccess(false)\n            axios\n                .post('/api/auth/join', { name, password })\n                .then(() => {\n                    setSignUpSuccess(true)\n                    mutate()\n                })\n                .catch((err) => {\n                    setSignUpError(true)\n                })\n\n        }, [name, password]\n    )\n\n    if (userData) {\n        return <Redirect to=\"/sadari\" />\n    }\n\n    // if (setSignUpSuccess) {\n    //     return <Redirect to=\"/sadari\" />\n    // }\n\n    return (\n        <>\n\n            <Segment\n                inverted\n                textAlign='center'\n                style={{ minHeight: 400, padding: '1em 0em' }}\n                vertical\n            >\n                <Container text>\n\n                    <Image\n                        size=\"large\"\n                        src='logo.png'\n                        centered\n                        style={{ padding: '1em' }}\n                    />\n                    {/* <Header>\n                        {cname}\n                    </Header> */}\n                    <Header\n                        as='h1'\n                        content='지금까지의 사다리타기는 잊어라!'\n                        inverted\n                    />\n\n                    <Header\n                        as='h1'\n                        content=\"편의성을 극대화한 '그냥' 사다리\"\n                        inverted\n                    />\n\n                    <Button primary size=\"huge\" style={{ margin: '1em' }} onClick={() => setOpen(true)}>\n                        일단 만들어 보기\n                        <Icon name='right arrow' />\n\n                    </Button>\n                </Container>\n            </Segment>\n\n            {\n                detail &&\n\n                <Segment style={{ padding: '4em 0em' }} vertical basic>\n                    <Grid container stackable verticalAlign='middle'>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    최고의 사용자 경험을 추구합니다\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    이름은 '그냥' 사다리지만 결코 '그냥' 만들진 않습니다.\n                                    매일매일 같은 사람들 이름을 입력하느라 손가락이 고생하지 않도록, 철수는 1번, 영희는 2번 하느라 헷갈릴 일 없게\n                                    '그냥' 사다리가 도와드리겠습니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    공유 가능한 사다리\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    사다리를 만들면서 입력한 패스코드를 공유하면 누구나 접근하여 사다리를 탈 수 있습니다.\n                                    참가자도 관리하고 결과도 공유해보면서 사다리를 타보세요!\n            </p>\n                            </Grid.Column>\n                            <Grid.Column floated='right' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari.png' />\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column textAlign='center'>\n                                <Button size='huge' style={{ margin: '2em' }} onClick={() => setDetail(false)}>알고 있어요</Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column floated='left' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari2.png' />\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    참가자 관리는 한 번만\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을 등록하고 다양한 게임을 진행해보세요!\n                                    '그냥' 사다리부터 안 뽑힌 사람 뽑는 '한 번씩 뽑기', 한번에 순서를 쫙! '순서 뽑기', 팀 나누기 애매할땐 '팀 나누기' 등 다양한 기능이 업데이트 예정입니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    아바타로 더 잘 구분하자\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    참가자를 추가하면서 아바타를 골라보세요. 랜덤으로 생성되는 수백개의 아바타가 여러분을 기다립니다.\n            </p>\n                            </Grid.Column>\n\n                        </Grid.Row>\n\n                    </Grid>\n                </Segment>\n            }\n\n            <Segment style={{ padding: '4em 0em' }} vertical basic padded>\n                <Card.Group stackable centered>\n                {/* <Link to=\"/sadari\"> */}\n                    {/* <Card>\n                        \n                        <Button primary fluid as={Link} to='/sadari' style={{ height: '100%', verticalAlign:'middle'}}>직접 입력해서 시작하기</Button>\n\n          \n                        \n                    </Card> */}\n                    {/* </Link> */}\n                    {\n                        usersData &&\n                        (usersData.map((user, i) => (\n                            <Card key={i}>\n                                {/* <Image src='ladder.png' wrapped ui={true} fluid></Image> */}\n\n                                <Card.Content>\n                                    <Image avatar floated='right' src={'https://avatars.dicebear.com/api/avataaars/' + user.name + '.svg'} />\n                                    <Card.Header>\n                                        {user.name}\n                        </Card.Header>\n                                    <CardDescription>\n                                    마지막 접속 : {user.loginAt && moment(user.loginAt).format('YYYY-MM-DD HH:mm:ss')}\n                        </CardDescription>\n                                </Card.Content>\n                                {/* <Card.Content extra>\n                        <Icon name='user' /> 10명의 참가자\n                    </Card.Content> */}\n                                <Card.Content extra>\n                                    <Button positive fluid as={Link} to={'/sadari?name=' + user.name}>\n                                        참가\n                        </Button>\n                                </Card.Content>\n                            </Card>\n                        )\n\n                        ))\n                    }\n\n\n                </Card.Group>\n\n            </Segment>\n\n\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n                <Header icon>\n                    <Icon name='road' />\n                    사다리 만들기      </Header>\n                <Modal.Content>\n                    <Form onSubmit={onSubmit} size='large'>\n\n                    <Form.Field>\n                    <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                           \n                    <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                    </Form.Field>\n                     \n\n                        <p>사다리 이름은 팀, 학습, 동아리 이름을 권장 드립니다. 예) 경영지원팀 사다리</p>\n                        <p>공유할 수 있는 입장 코드를 입력해주세요. 입장코드를 아는 사람들만 들어올 수 있습니다.</p>\n                        <p>입장코드는 암호화되어 관리자도 알 수 없습니다.</p>\n                        <p>민감한 개인정보는 사다리 이름, 입장 코드로 사용하지 마세요</p>\n\n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button color='red' inverted onClick={() => setOpen(false)}>\n                                    <Icon name='remove' /> 취소\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='checkmark' /> 생성\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {signUpError &&\n                        <Message negative>\n                            <Message.Header>\n                                사다리 생성 실패!!\n            </Message.Header>\n                            <p>\n                                중복된 이름입니다. 다른 이름을 넣어주세요.\n            </p>\n                        </Message>\n                    }\n                    {signUpSuccess &&\n                        <Message positive>\n                            <Message.Header>\n                                사다리 생성 성공!!\n            </Message.Header>\n                            <p>\n                                <mark><a href={\"/sadari?name=\" + name}>여기</a></mark>를 눌러 사다리로 이동합니다.\n            </p>\n                        </Message>\n                    }\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal>\n\n\n        </>\n    )\n}\n\n\nexport default Home;\n","import React from \"react\";\nimport {\n  Divider,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nconst Info = () => {\n  const disqusShortname = \"sadari\";\n\n  return (\n    <>\n      <Segment vertical basic>\n        <Grid container stackable verticalAlign=\"middle\">\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                완전 무료 사다리 '그냥' 사다리\n              </Header>\n              <p style={{ fontSize: \"1.33em\" }}>\n                이 사이트는 취미로 만들어진 사이트입니다. <br />\n                사다리 타기 외에도 다양한 기능을 탑재하여 원격수업과\n                랜선회식에서 사용할 수 있습니다! <br />\n                많이 많이 쓰고 주변에 알려주세요\n              </p>\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                매번 이름 입력하기 힘드시죠?\n              </Header>\n              <p style={{ fontSize: \"1.33em\" }}>\n                csv 업로드통해 한번에 관리하고 로그인 기능(추가 예정)을 통해\n                명단을 저장해놓을 수 있습니다.\n              </p>\n            </Grid.Column>\n            <Grid.Column floated=\"right\" width={6}>\n              <Image bordered rounded size=\"massive\" src=\"/sadari.png\" />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column floated=\"left\" width={6}>\n              <Image bordered rounded size=\"massive\" src=\"/sadari2.png\" />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                참가자 관리는 한 번만\n              </Header>\n              <p style={{ fontSize: \"1.33em\" }}>\n                다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을\n                등록하고 다양한 게임을 진행해보세요!\n              </p>\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                아바타로 더 잘 구분하자\n              </Header>\n              <p style={{ fontSize: \"1.33em\" }}>\n                참가자를 추가될 대 랜덤으로 아바타가 생성됩니다. 무엇이\n                만들어지는지 한번 지켜보세요!\n              </p>\n            </Grid.Column>\n          </Grid.Row>\n          <Divider />\n          <Grid.Row>\n            <Message negative style={{ width: \"100%\" }}>\n              <Message.Header>정보 및 공지 페이지 입니다.</Message.Header>\n              <p>업데이트 상황 및 건의사항은 아래 내용을 참고해주세요!!</p>\n            </Message>\n          </Grid.Row>\n\n          <Grid.Row>\n            <Segment style={{ width: \"100%\" }}>\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                업데이트 일정\n              </Header>\n\n              <p style={{ fontSize: \"1.33em\" }}>\n                사다리타기 - 구현 완료 <br />\n                순서뽑기 - 구현 완료 <br />\n                랜덤뽑기 - 구현 완료 <br />\n                팀나누기 - 구현 완료 <br />\n                자리배치 - 구현 완료 <br />\n                로그인 및 명단 저장 - 구현 예정\n              </p>\n\n              <Header as=\"h3\" style={{ fontSize: \"2em\" }}>\n                공지사항\n              </Header>\n\n              <p style={{ fontSize: \"1.33em\" }}>\n                건의사항이 있을 경우 아래에 코멘트로 달아주세요!!\n              </p>\n            </Segment>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    </>\n  );\n};\n\nexport default Info;\n","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariComponent from '../components/sadari'\nimport MemberManager from '../components/memberManager'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n\n<MemberManager>\n                <SadariComponent />\n                </MemberManager>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList, setMemberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n    const selectedMemberList = activeMemberList.filter((member) => member.once === true)\n    const unSelectedMemberList = activeMemberList.filter((member) => member.once === false)\n\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const [selectedMember, setSelectedMember] = useState(null)\n    const [visible, setVisible] = useState(false)\n\n    const onToggle = useCallback((id) => {\n        setMemberList(\n            activeMemberList.map(member =>\n                member.id === id ? { ...member, once: !member.once} : member\n            )\n        )\n    }, [activeMemberList])\n\n    const onSelect = useCallback(async() => {\n        const unSelectedMemberList = activeMemberList.filter((member) => member.once === false)\n\n        if (unSelectedMemberList.length) {\n\n            setVisible(true)\n            await timeout(1000)\n            setVisible(false)\n\n            const selectedIndex = Math.floor(Math.random() * unSelectedMemberList.length)\n            const selectedId = unSelectedMemberList[selectedIndex].id\n    \n            setSelectedMember(unSelectedMemberList[selectedIndex])\n            setMemberList(\n                memberList.map(member =>\n                    member.id === selectedId ? { ...member, once: true} : member\n                )\n            )\n        }\n\n\n    }, [activeMemberList])\n\n\n    const onReset = useCallback(() => {\n        setMemberList(memberList.map(member => {\n            return {...member, once: false}\n        }))\n    },\n        [activeMemberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    랜덤 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onSelect()} disabled={visible || unSelectedMemberList.length === 0}>한명씩 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>안 뽑힌 사람 중 한명씩 뽑습니다!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! <br/> 뽑힌 이력을 지우려면 초기화 버튼을 누르거나 뽑힌 참가자 명단에서 이름을 클릭하세요.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n\n                <Segment raised textAlign=\"center\" style={{display: 'table', width: '100%', height:'150px', padding: '0'}} stacked inverted={visible}>\n                    {\n                        !visible && selectedMember && <MemberItem member={selectedMember} isBig size='massive' />\n                    }\n\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    아직 안 뽑힌 참가자\n                </Header>\n\n                <Segment stacked>\n                    {\n                        unSelectedMemberList.map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    뽑힌 참가자\n                </Header>\n\n\n                <Segment stacked>\n                    {\n                        selectedMemberList.map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariComponent from '../components/sadari'\nimport OnceComponet from '../components/once'\nimport MemberManager from '../components/memberManager'\n\nconst Once = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OnceComponet />\n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n             */}\n\n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Once;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst OrderItem = ({ member, order }) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n    return (\n        <List.Item>\n                        <List.Content floated=\"right\">\n                        <Header as='h1' color={color(id, active)}>\n                    {order} 등\n                </Header>\n            </List.Content>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            {/* <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content> */}\n\n            <List.Content verticalAlign='middle' floated=\"left\">\n                <Header as='h1' color={color(id, active)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default OrderItem","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\nimport OrderItem from './OrderItem'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [shuffledData, setShuffledData] = useState([]);\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            setShuffledData([])\n            setVisible(true)\n            await timeout(2000)\n            setVisible(false)\n            setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setShuffledData([])\n    },\n        [memberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    순서 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onShuffle()} disabled={visible}>순서대로 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! 뽑은 결과를 없애려면 초기화 버튼을 누르면 됩니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {/* <List\n                        // celled\n                        divided\n                        // selection\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    > */}\n                        {\n                            shuffledData.map((member, id) => \n                            <OrderItem\n                                member={member}\n                                key={id}\n                                order={id+1}\n                                />\n                            )\n                        }\n                        {/* {\n                            shuffledData &&\n                            shuffledData.filter((member) => member.active === true).map((member, id) => (\n                                <OrderItem\n                                    user={member}\n                                    key={id}\n                                    order={id+1}\n                                />\n                            )\n                            )\n                        } */}\n                    {/* </List> */}\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport OrderComponent from '../components/order'\nimport MemberManager from '../components/memberManager'\n\nconst Order = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OrderComponent />\n            \n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Order;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Setting = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Setting;","import React from \"react\";\nimport { Header, Segment } from \"semantic-ui-react\";\nimport MemberItem from \"../memberManager/MemberItem\";\n\nconst TeamItem = ({ team, id }) => {\n  return (\n    <>\n      <Header as=\"h3\" textAlign=\"left\">\n        {id + 1} 팀 : {team.length} 명\n      </Header>\n\n      <Segment stacked>\n        {team &&\n          team.map((member, index) => (\n            <MemberItem key={index} member={member} />\n          ))}\n      </Segment>\n    </>\n  );\n};\n\nexport default TeamItem;\n","import React, { useCallback, useState, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport TeamItem from './TeamItem'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [teamData, setTeamData] = useState([]);\n    const [options, setOptions] = useState([])\n    const [currentValue, setCurrentValue] = useState(2)\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            // setShuffledData([])\n            // setVisible(true)\n            // await timeout(2000)\n            // setVisible(false)\n            // setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setTeamData([])\n    },\n        [memberList],\n    )\n\n    const onChangeOptions = useCallback(() => {\n\n        if(activeMemberList.length > 0) {\n            const length = activeMemberList.length >= 8 ? 8 : activeMemberList.length\n            const newOptions = [...Array(length-1)].map((option, id) => {\n                return {key: id + 2, text: id + 2, value: id + 2}\n            })\n            setOptions(newOptions)\n\n        }\n\n    }, [memberList, currentValue])\n\n    const onSetTeam = useCallback(async() => {\n        \n        const newMemberList = activeMemberList\n        \n        shuffle(newMemberList)\n\n        const result = Array(currentValue)\n\n        const unit = newMemberList.length / currentValue\n\n        for (let i = 0; i < currentValue; i++) {\n            result[i] = newMemberList.slice(unit*i, unit*(i+1))\n        }\n        setTeamData([])\n        setVisible(true)\n        await timeout(2000)\n        setVisible(false)\n\n        setTeamData(result)\n\n    },\n        [memberList, currentValue],\n    )\n\n    useEffect(() => {\n        onChangeOptions()\n      }, [memberList])\n\n    return (\n\n        <>\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    팀 나누기\n            </Header>\n\n\n            <Dropdown   \n                    onChange={(e, {value}) => setCurrentValue(value)}\n                    options={options}\n                    selection\n                    value={currentValue}\n                    // placeholder='팀 숫자를 골라주세요'\n                    // style={{width:'100px'}}\n                    compact\n                    />팀으로\n                    \n\n\n                    <Button negative onClick={() => onReset()} floated='right' disabled={visible}>초기화</Button>\n                    <Button positive onClick={() => onSetTeam()} \n                        disabled={activeMemberList.length < 2 || visible}\n                        floated='right'\n                        // style={{width:'50%'}}\n                        >나누기</Button>\n                    \n\n\n\n\n                    <Divider />\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>되도록 같은 숫자로 맞추어서 뽑지만 팀 수에 따라 다소 차이가 생길 수 있습니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {\n                        teamData &&\n                        teamData.map((team, id) => (\n                            <TeamItem\n                                team={team}\n                                id={id}\n                                visible={!visible}\n                            />\n\n                        ))\n                        \n                    }\n\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\nimport MemberManager from '../components/memberManager'\n\nimport TeamComponent from '../components/team'\n\nconst Team = () => {\n\n    return (\n        <>\n            <MemberManager>\n            <TeamComponent />\n\n            </MemberManager>\n\n                \n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message> */}\n            \n\n        </>\n    )\n}\n\n\nexport default Team;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Table\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst SeatList = ({ cols, size }) => {\n\n\n\n\n\n    return (\n        <>\n        <Table.Row textAlign='center'>\n            {\n                cols.map((col, id) =><Table.Cell style={{padding:'0'}} ><MemberItem member={col} key={id} size={size} /></Table.Cell> )\n            }\n        </Table.Row>\n\n\n\n\n\n\n                        {/* <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n                </Segment> */}\n        </>\n\n    )\n}\n\nexport default SeatList","import { createMedia } from \"@artsy/fresnel\"\n\nconst { MediaContextProvider, Media } = createMedia({\n  // breakpoints values can be either strings or integers\n  breakpoints: {\n    sm: 0,\n    lg: 1024,\n  },\n})\n\nexport { MediaContextProvider }\nexport default Media","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Table\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\nimport SeatCols from './SeatCols'\nimport Media from '../../contexts/Media'\n\n\nconst SeatList = ({ rows }) => {\n\n    const size = () => {\n        if (rows[0].length < 3 ) {\n            return 'big'\n        } else if (rows[0].length < 6) {\n            return 'medium'\n        } else {\n            return null\n        }\n    }\n\n\n\n    return (\n        <>\n\n\n\n\n\n<Header textAlign='center' as='h1' block style={{margin: '0.2em'}}>\n                앞\n            </Header>\n\n\n            <Media at=\"sm\">\n        <Table basic='very' textAlign='center' unstackable>\n\n        <Table.Body>\n            {\n                rows.map((row, id) => <SeatCols cols={row} size={size()} key={id} />)\n            }\n            </Table.Body>\n            </Table>\n    </Media>\n\n    <Media greaterThanOrEqual=\"lg\">\n    <Table basic='very' textAlign='center' unstackable>\n    <Table.Body>\n            {\n                rows.map((row, id) => <SeatCols cols={row} size='massive' key={id} />)\n            }\n            </Table.Body>\n\n\n        </Table>\n\n        </Media>\n\n\n\n\n\n                        {/* <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n\n\n                </Segment> */}\n        </>\n\n    )\n}\n\nexport default SeatList","import React, { useCallback, useState, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\n// import TeamItem from './TeamItem'\nimport SeatList from './SeatList'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [rows, setRows] = useState([]);\n    const [options, setOptions] = useState([...Array(10)].map((option, id) => ({key: id + 1, text: id + 1, value: id + 1})))\n    const [currentValue, setCurrentValue] = useState(3)\n    const [visible, setVisible] = useState(false)\n\n\n    const onReset = useCallback(() => {\n        setRows(rows)\n    },\n        [memberList],\n    )\n\n\n    const onSetSeat = useCallback(async() => {\n        \n        const newMemberList = activeMemberList\n        \n        shuffle(newMemberList)\n\n        const total = newMemberList.length\n        const col = currentValue\n        const row = Math.ceil(total / col)\n        const rows = []\n    \n    \n        for(let i = 0; i < row; i++) {\n            rows.push(newMemberList.slice(i * col, (i + 1) * col))\n        }\n\n        setRows([])\n        setVisible(true)\n        await timeout(2000)\n        setVisible(false)\n        setRows(rows)\n\n    },\n        [memberList, currentValue],\n    )\n\n\n    return (\n\n        <>\n\n        <Segment style={{width:'100%', padding:'0.2em'}} inverted={visible} >\n\n        {\n    !visible && <SeatList rows={rows} />\n            }\n\n            \n\n            {\n    visible && <Image size='small' src='/loading.gif' centered />\n            }\n\n        </Segment>\n\n        <Segment style={{width:'100%'}} >\n        <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    자리 배치\n            </Header>\n\n            <Divider />\n\n            <Dropdown   \n                    onChange={(e, {value}) => setCurrentValue(value)}\n                    options={options}\n                    selection\n                    value={currentValue}\n                    placeholder='1열당 사람 수'\n                    // style={{width:'100px'}}\n                    compact\n                    />\n                    개의 열로\n\n\n\n\n\n<Button negative onClick={() => onReset()} floated='right' disabled={visible}>초기화</Button>\n<Button positive onClick={() => onSetSeat()} \n                        disabled={activeMemberList.length < 2 || visible}\n                        floated='right'\n                        // style={{width:'50%'}}\n                        >자리 배치</Button>\n\n<Message info>\n<Message.Header>앞에서부터 자리를 채웁니다</Message.Header>\n        <p>뒷자리는 다 안 채워질 수 있습니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n\n\n\n        </Segment>\n\n\n\n\n\n\n\n\n\n\n\n{/* <List\n                divided\n                relaxed\n            >\n\n                    {\n                        teamData &&\n                        teamData.map((team, id) => (\n                            <TeamItem\n                                team={team}\n                                id={id}\n                                visible={!visible}\n                            />\n\n                        ))\n                        \n                    }\n\n                   </List> */}\n\n                   \n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from \"react\";\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Card,\n  CardDescription,\n  Label,\n  Input,\n  Statistic,\n  Message,\n} from \"semantic-ui-react\";\nimport MemberManager from \"../components/memberManager\";\n\nimport SeatComponent from \"../components/seat\";\n\nconst Team = () => {\n  return (\n    <>\n      <MemberManager>\n        <SeatComponent />\n      </MemberManager>\n    </>\n  );\n};\n\nexport default Team;\n","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\n\n\nconst UserInsert = ({ onCreate }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            }\n        },\n        [name],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    required\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    content='추가'\n                    // unstackable \n                    fluid\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst UserItem = ({ user, onActivate, onDeActivate, onDelete }) => {\n    const { id, name, status } = user\n\n    const color = (id, status) => {\n        if (status === 0) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n        <List.Item>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content>\n            <List.Content verticalAlign='middle'>\n                <Header as='h1' color={color(id, status)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default UserItem","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport UserInsert from './UserInsert'\nimport UserItem from './UserItem'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nconst UserComponent = () => {\n\n    const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const onCreate = useCallback(\n        (name) => {\n            axios\n                .post('/api/members', { name })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 1 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onDeActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 0 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n    const onDelete = useCallback(\n        (id) => {\n            axios\n                .delete('/api/members/' + id)\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n\n\n\n    return (\n\n        <Grid>\n            <Grid.Column style={{ maxWidth: 1000 }}>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    사다리 참가자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 1).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                    <UserInsert onCreate={onCreate} />\n                </Segment>\n\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    대기자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 0).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                </Segment>\n            </Grid.Column>\n        </Grid>\n\n\n\n    )\n}\n\nexport default UserComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport UserComponent from '../components/user'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n            <SadariMenu>\n\n                <UserComponent />\n\n            \n         \n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\nimport { getColorById } from \"../../utils/ColorTable\";\n\nconst QuestionItem = ({ question, member }) => {\n  const { id, name, active } = member || {};\n\n  const color = () => {\n    if (!member) {\n      return \"grey\";\n    } else {\n      return getColorById(id);\n    }\n  };\n\n  return (\n    <Label\n      size={\"massive\"}\n      image\n      color={color()}\n      style={{\n        display: \"table-cell\",\n        verticalAlign: \"middle\",\n        height: \"300px\",\n      }}\n    >\n      {member && (\n        <>\n          <img\n            src={\"https://avatars.dicebear.com/api/avataaars/\" + name + \".svg\"}\n          />\n          {name}\n          <br />\n          <br />\n          <br />\n        </>\n      )}\n\n      {question}\n    </Label>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useCallback, useState } from \"react\";\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Card,\n  CardDescription,\n  Label,\n  Input,\n  Statistic,\n  Message,\n  Transition,\n  Checkbox,\n  Modal,\n  Form,\n  TextArea,\n} from \"semantic-ui-react\";\n\nimport fetcher from \"../../utils/fetcher\";\nimport useSWR from \"swr\";\n\nimport axios from \"axios\";\n\nimport ColorTable, { getColorById } from \"../../utils/ColorTable\";\n\nimport { timeout } from \"../../utils/Timeout\";\n\nimport useMemberList from \"../../contexts/memberList\";\nimport MemberItem from \"../memberManager/MemberItem\";\nimport QuestionItem from \"./QuestionItem\";\n// import QuestionList from \"./QuestionList\";\n\nconst OrderComponent = () => {\n  const defaultQuestion = \"여기에 질문이 나타납니다\";\n\n  const { memberList } = useMemberList();\n  const activeMemberList = memberList.filter(\n    (member) => member.active === true\n  );\n\n  // const [currentIndex, setcurrentIndex] = useState(0)\n  const [question, setQuestion] = useState(defaultQuestion);\n  const [questionList, setQuestionList] = useState([]);\n  const [currentMember, setCurrentMember] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [withMember, setWithMember] = useState(false);\n\n  const [textValue, setTextValue] = useState(\"\");\n  const handleTextValue = (e) => {\n    setTextValue(e.target.value);\n  };\n\n  // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  const [visible, setVisible] = useState(false);\n\n  const onSelect = useCallback(async () => {\n    setVisible(true);\n    await timeout(1500);\n\n    if (questionList.length == 0) {\n      setCurrentMember(null);\n      setQuestion(\"질문이 없어요! 질문 추가하기 버튼을 눌러서 추가해주세요\");\n    } else {\n      const currentQuestion =\n        questionList[Math.floor(Math.random() * questionList.length)];\n\n      setQuestion(currentQuestion);\n\n      if (withMember) {\n        setCurrentMember(\n          activeMemberList[Math.floor(Math.random() * activeMemberList.length)]\n        );\n      } else {\n        setCurrentMember(null);\n      }\n\n      setQuestionList(\n        questionList.filter((question) => question !== currentQuestion)\n      );\n    }\n\n    setVisible(false);\n  }, [question, questionList, memberList, withMember]);\n\n  const onReset = useCallback(() => {\n    setQuestion(defaultQuestion);\n    setQuestionList([]);\n    setCurrentMember(null);\n  }, [question, questionList, memberList]);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (textValue) {\n        const textValueArray = textValue.split(/\\r?\\n/).filter(Boolean);\n        setQuestionList([...questionList, ...textValueArray]);\n        setTextValue(\"\");\n        setIsOpen(false);\n      }\n    },\n    [textValue, questionList]\n  );\n\n  return (\n    <>\n      <Grid.Column>\n        <Header as=\"h1\" textAlign=\"center\" style={{ margin: \"1em\" }}>\n          그냥 질문지\n        </Header>\n\n        <Grid.Row style={{ marginTop: \"2em\" }}>\n          <Button\n            fluid\n            style={{ height: \"50px\" }}\n            primary\n            onClick={() => onSelect()}\n            disabled={visible}\n          >\n            질문지 뽑기\n          </Button>\n        </Grid.Row>\n\n        <Grid.Row style={{ marginTop: \"1em\" }}>\n          <Checkbox\n            checked={withMember}\n            disabled={visible}\n            onChange={() => {\n              setWithMember(!withMember);\n            }}\n            label=\"답변자도 같이 뽑기\"\n          ></Checkbox>\n        </Grid.Row>\n\n        <Grid.Row style={{ marginTop: \"1em\" }}>\n          <Button onClick={() => setIsOpen(true)} disabled={visible}>\n            질문 추가하기\n          </Button>{\" \"}\n          <Button\n            // negative\n            onClick={() => onReset()}\n            // floated=\"right\"\n            disabled={visible}\n          >\n            질문지 초기화\n          </Button>\n        </Grid.Row>\n\n        <Message info>\n          <Message.Header>\n            아이스브레이킹, 자기소개를 위한 질문지 뽑기!\n          </Message.Header>\n          <p>질문지 뽑기 버튼을 눌러서 다양한 질문들을 뽑아보세요!</p>\n        </Message>\n      </Grid.Column>\n      <Grid.Column>\n        <br></br>\n\n        <Segment\n          raised\n          textAlign=\"center\"\n          style={{\n            display: \"table\",\n            width: \"100%\",\n            // height: \"300px\",\n            padding: \"0\",\n          }}\n          stacked\n          inverted={visible}\n        >\n          {!visible && (\n            <QuestionItem question={question} member={currentMember} />\n          )}\n\n          {visible && <Image size=\"medium\" src=\"/loading.gif\" centered />}\n        </Segment>\n      </Grid.Column>\n\n      <Modal\n        onClose={() => setIsOpen(false)}\n        onOpen={() => setIsOpen(true)}\n        open={isOpen}\n      >\n        <Modal.Header>질문을 입력해주세요 - 엔터로 구분됩니다</Modal.Header>\n\n        <Modal.Content>\n          {\" \"}\n          <Form onSubmit={onSubmit}>\n            <TextArea\n              style={{ minHeight: 200 }}\n              placeholder=\"여기에 입력하세요\"\n              value={textValue}\n              onChange={(e) => handleTextValue(e)}\n            />\n\n            <Form.Button style={{ marginTop: \"1em\" }} fluid>\n              {\" \"}\n              추가하기\n            </Form.Button>\n          </Form>\n        </Modal.Content>\n      </Modal>\n    </>\n  );\n};\n\nexport default OrderComponent;\n","import React, { useState, useRef, useCallback, useMemo } from \"react\";\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Card,\n  CardDescription,\n  Label,\n  Input,\n  Statistic,\n  Message,\n} from \"semantic-ui-react\";\n\nimport SadariComponent from \"../components/sadari\";\nimport QuestionComponet from \"../components/question\";\nimport MemberManager from \"../components/memberManager\";\n\nconst Once = () => {\n  return (\n    <>\n      <MemberManager>\n        <QuestionComponet />\n      </MemberManager>\n    </>\n  );\n};\n\nexport default Once;\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport { createMedia } from \"@artsy/fresnel\"\n\n\n\nimport MobileMenu from './components/sadariMenu/MobileMenu'\nimport MemberManager from './components/memberManager'\n\nimport SadariComponent from './components/sadari'\n\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport Seat from './pages/Seat'\nimport User from './pages/User'\nimport Question from './pages/Question'\nimport { MemberListProvider } from './contexts/memberList'\n\n\nconst App = () => {\n  return (\n    <MobileMenu>\n\n\n    <Switch>\n      <Route exact path=\"/\">\n      <MainSadari />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n      <Route exact path=\"/seat\">\n        <Seat />\n      </Route>\n      <Route exact path=\"/question\">\n        <Question />\n      </Route>\n    </Switch>\n\n\n    </MobileMenu>\n\n  )\n}\n\nexport default App;\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message,\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\nimport MemberListButton from './MemberListButton'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible)\n      setVisible(false)\n  }\n\n  // const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setTimeout(() => {\n        setExit(true)\n      }, 500)\n    });\n}, []);\n\n// const history = useHistory()\n\n// const goBack = () => {\n//   history.goBack()\n// }\n\n\n\n//   if(exit) {\n//     return <Redirect to=\"/\" />\n//   }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n        >\n\n          {/* <Menu.Item>\n            <Menu.Header >\n              {userData && userData.name}\n          </Menu.Header>\n          </Menu.Item> */}\n\n          {/* <Menu.Item\n            as={Link}\n            to='/info'\n            \n          >\n            <Icon name='info circle' size=\"large\"/>\n            정보\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/member'\n          >\n            <Icon name='users' size=\"large\" />\n            참가자 관리\n          </Menu.Item> */}\n\n          <Menu.Item\n            as={Link}\n            to='/sadari'\n          >\n            <Icon name='road' size=\"large\" />\n            사다리 타기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            랜덤 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/setting'\n          >\n            <Icon name='setting' size=\"large\" />\n            설정\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          {/* <Menu fixed='top' inverted borderless> */}\n          <Menu \n            inverted\n            style={{ margin: '10px' }}\n            borderless\n            size='small'\n            >\n\n            {/* <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item> */}\n\n<Menu.Item\n            as={Link}\n            to='/'\n          >\n              <Image size='tiny' src='logo.png'></Image>\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/'\n          >\n              사다리타기\n            </Menu.Item>\n\n\n\n            <Menu.Item\n            as={Link}\n            to='/order'\n          >\n              순서뽑기\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/once'\n          >\n              랜덤뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/team'\n          >\n              팀나누기\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/seat'\n          >\n              자리배치\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/question'\n          >\n              그냥질문지\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/info'\n          >\n              이건뭔가요?\n            </Menu.Item>\n\n\n\n\n            <Menu.Menu position='right'>\n              <Menu.Item>\n\n                  <Button primary fluid disabled>\n                    로그인\n                  </Button>\n\n                  {/* <Button negative>\n                    로그아웃\n                  </Button> */}\n    \n              </Menu.Item>\n\n\n            </Menu.Menu> \n\n          </Menu>\n          \n          {/* <Segment\n            style={{ margin: '10px'}}\n            secondary\n          \n          >\n\n            <Button icon positive>\n              <Icon name='plus' />\n              </Button>\n            \n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            \n          </Segment> */}\n\n\n\n          <Container style={{ marginTop: '2em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n{/* \n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal> */}\n    </>\n  )\n}\n\nexport default SadariMenu;\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport { createMedia } from \"@artsy/fresnel\"\n\n\n\nimport MemberManager from './components/memberManager'\n\nimport SadariComponent from './components/sadari'\nimport DesktopMenu from './components/sadariMenu/DesktopMenu'\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport Seat from './pages/Seat'\nimport User from './pages/User'\nimport Question from './pages/Question'\nimport { MemberListProvider } from './contexts/memberList'\n\n\nconst App = () => {\n  return (\n    <DesktopMenu>\n\n\n    <Switch>\n      <Route exact path=\"/\">\n      <MainSadari />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n      <Route exact path=\"/seat\">\n        <Seat />\n      </Route>\n      <Route exact path=\"/question\">\n        <Question />\n      </Route>\n    </Switch>\n\n\n    </DesktopMenu>\n\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\nimport { createMedia } from \"@artsy/fresnel\"\n\nimport MobileApp from './MobileApp'\nimport DesktopApp from './DesktopApp'\nimport { MemberListProvider } from './contexts/memberList'\nimport Media, { MediaContextProvider } from './contexts/Media'\n\n\nconst App = () => {\n  return (\n    <MemberListProvider>\n    <MediaContextProvider>\n    <Media at=\"sm\">\n      <MobileApp />\n    </Media>\n    <Media greaterThanOrEqual=\"lg\">\n      <DesktopApp />\n    </Media>\n  </MediaContextProvider>\n  </MemberListProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}