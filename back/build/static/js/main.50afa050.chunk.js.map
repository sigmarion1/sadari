{"version":3,"sources":["utils/useInput.js","utils/fetcher.js","pages/Home.js","utils/useQuery.js","components/sadariMenu/index.js","utils/ColorTable.js","components/sadari/SadariTD.js","utils/Random.js","utils/Timeout.js","components/sadari/EditableText.js","components/sadari/index.js","pages/Info.js","pages/MainSadari.js","pages/Once.js","pages/Order.js","pages/Setting.js","pages/Team.js","components/user/UserInsert.js","components/user/UserItem.js","components/user/index.js","pages/User.js","App.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","useCallback","e","target","fetcher","url","axios","get","withCredentials","then","response","data","faker","locale","Home","useSWR","usersData","detail","setDetail","open","setOpen","name","firstName","onChangeName","password","onChangePassword","signUpError","setSignUpError","signUpSuccess","setSignUpSuccess","onSubmit","preventDefault","trim","post","catch","err","Segment","inverted","textAlign","style","minHeight","padding","vertical","Container","text","Image","size","src","centered","Header","as","content","Button","primary","margin","onClick","Icon","basic","Grid","container","stackable","verticalAlign","Row","Column","width","fontSize","floated","bordered","rounded","padded","Card","Group","map","user","i","Content","avatar","CardDescription","loginAt","moment","format","extra","positive","fluid","Link","to","Modal","onClose","onOpen","icon","Form","Field","Input","required","iconPosition","placeholder","onChange","marginBottom","type","color","Message","negative","href","Actions","useQuery","URLSearchParams","useLocation","search","SadariMenu","props","visible","setVisible","userData","loginError","setLoginError","exit","setExit","onLogin","mutate","onLogout","history","useHistory","Sidebar","Pushable","Menu","animation","borderless","Item","Pusher","dimmed","fixed","position","marginTop","children","goBack","ColorTable","ColorTableRaw","getColorById","id","length","SadariTD","vColor","hColor","hstyle","borderBottom","visibility","vstyle","height","borderLeft","left","getRandomInt","min","max","Math","ceil","floor","random","timeout","delay","Promise","res","setTimeout","EditableInput","inputRef","useRef","inputVisible","setInputVisible","setText","onClickOutSide","current","contains","useEffect","document","addEventListener","removeEventListener","Fragment","ref","Label","MainSadari","membersData","members","filter","member","status","horizontalCount","connCount","timeouts","lState","setLState","rState","setRState","isPlaying","setIsPlaying","resetHandler","a","arr","verticalArr","j","node","v","push","Array","fill","replaceHandler","newLState","slice","verticalCount","hIndex","vIndex","h","runHandler","order","startId","endId","newRState","stopHandler","clearTimeout","borderWidth","borderColor","textAlignLast","borderSpacing","tableLayout","index","image","horizontal","_","disabled","secondary","info","Info","Once","Order","Setting","Team","UserInsert","onCreate","setName","unstackable","UserItem","onActivate","onDeActivate","onDelete","List","UserComponent","patch","delete","maxWidth","stacked","divided","relaxed","App","exact","path","User","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.50afa050.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const handler = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;","import axios from 'axios';\n\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((response) => response.data);\n\nexport default fetcher;","import React, { useState, useCallback, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Modal,\n    Input,\n    Form,\n    Message\n} from 'semantic-ui-react'\nimport { Link, Redirect } from 'react-router-dom'\nimport useInput from '../utils/useInput'\nimport fetcher from '../utils/fetcher'\nimport axios from 'axios'\nimport useSWR from 'swr'\nimport moment from 'moment'\nimport faker from 'faker'\n\nfaker.locale = \"ko\"\n\nconst Home = () => {\n\n    const { data: userData } = useSWR('/api/auth', fetcher)\n    const { data: usersData } = useSWR('/api/users', fetcher)\n\n    const [detail, setDetail] = useState(true)\n    const [open, setOpen] = useState(false)\n\n    const [name, onChangeName] = useInput(faker.name.firstName() + '의 사다리')\n    const [password, onChangePassword] = useInput('')\n\n    const [signUpError, setSignUpError] = useState(false)\n    const [signUpSuccess, setSignUpSuccess] = useState(false)\n\n    const onSubmit = useCallback(\n        (e) => {\n            e.preventDefault()\n\n            if (!name || !name.trim()) {\n                return\n            }\n\n            setSignUpError(false)\n            setSignUpSuccess(false)\n            axios\n                .post('/api/auth/join', { name, password })\n                .then(() => {\n                    setSignUpSuccess(true)\n                })\n                .catch((err) => {\n                    setSignUpError(true)\n                })\n\n        }, [name, password]\n    )\n\n    // if (userData) {\n    //     return <Redirect to=\"/sadari\" />\n    // }\n\n    return (\n        <>\n\n            <Segment\n                inverted\n                textAlign='center'\n                style={{ minHeight: 400, padding: '1em 0em' }}\n                vertical\n            >\n                <Container text>\n\n                    <Image\n                        size=\"large\"\n                        src='logo.png'\n                        centered\n                        style={{ padding: '1em' }}\n                    />\n                    {/* <Header>\n                        {cname}\n                    </Header> */}\n                    <Header\n                        as='h1'\n                        content='지금까지의 사다리타기는 잊어라!'\n                        inverted\n                    />\n\n                    <Header\n                        as='h1'\n                        content=\"편의성을 극대화한 '그냥' 사다리\"\n                        inverted\n                    />\n\n                    <Button primary size=\"huge\" style={{ margin: '1em' }} onClick={() => setOpen(true)}>\n                        일단 만들어 보기\n                        <Icon name='right arrow' />\n\n                    </Button>\n                </Container>\n            </Segment>\n\n            {\n                detail &&\n\n                <Segment style={{ padding: '4em 0em' }} vertical basic>\n                    <Grid container stackable verticalAlign='middle'>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    최고의 사용자 경험을 추구합니다\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    이름은 '그냥' 사다리지만 결코 '그냥' 만들진 않습니다.\n                                    매일매일 같은 사람들 이름을 입력하느라 손가락이 고생하지 않도록, 철수는 1번, 영희는 2번 하느라 헷갈릴 일 없게\n                                    '그냥' 사다리가 도와드리겠습니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    공유 가능한 사다리\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    사다리를 만들면서 입력한 패스코드를 공유하면 누구나 접근하여 사다리를 탈 수 있습니다.\n                                    참가자도 관리하고 결과도 공유해보면서 사다리를 타보세요!\n            </p>\n                            </Grid.Column>\n                            <Grid.Column floated='right' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari.png' />\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column textAlign='center'>\n                                <Button size='huge' style={{ margin: '2em' }} onClick={() => setDetail(false)}>알고 있어요</Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column floated='left' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari2.png' />\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    참가자 관리는 한 번만\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을 등록하고 다양한 게임을 진행해보세요!\n                                    '그냥' 사다리부터 안 뽑힌 사람 뽑는 '한 번씩 뽑기', 한번에 순서를 쫙! '순서 뽑기', 팀 나누기 애매할땐 '팀 나누기' 등 다양한 기능이 업데이트 예정입니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    아바타로 더 잘 구분하자\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    참가자를 추가하면서 아바타를 골라보세요. 랜덤으로 생성되는 수백개의 아바타가 여러분을 기다립니다.\n            </p>\n                            </Grid.Column>\n\n                        </Grid.Row>\n\n                    </Grid>\n                </Segment>\n            }\n\n            <Segment style={{ padding: '4em 0em' }} vertical basic padded>\n                <Card.Group stackable centered>\n                {/* <Link to=\"/sadari\"> */}\n                    {/* <Card>\n                        \n                        <Button primary fluid as={Link} to='/sadari' style={{ height: '100%', verticalAlign:'middle'}}>직접 입력해서 시작하기</Button>\n\n          \n                        \n                    </Card> */}\n                    {/* </Link> */}\n                    {\n                        usersData &&\n                        (usersData.map((user, i) => (\n                            <Card key={i}>\n                                {/* <Image src='ladder.png' wrapped ui={true} fluid></Image> */}\n\n                                <Card.Content>\n                                    <Image avatar floated='right' src={'https://avatars.dicebear.com/api/avataaars/' + user.name + '.svg'} />\n                                    <Card.Header>\n                                        {user.name}\n                        </Card.Header>\n                                    <CardDescription>\n                                    마지막 접속 : {user.loginAt && moment(user.loginAt).format('YYYY-MM-DD HH:mm:ss')}\n                        </CardDescription>\n                                </Card.Content>\n                                {/* <Card.Content extra>\n                        <Icon name='user' /> 10명의 참가자\n                    </Card.Content> */}\n                                <Card.Content extra>\n                                    <Button positive fluid as={Link} to={'/sadari?name=' + user.name}>\n                                        참가\n                        </Button>\n                                </Card.Content>\n                            </Card>\n                        )\n\n                        ))\n                    }\n\n\n                </Card.Group>\n\n            </Segment>\n\n\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n                <Header icon>\n                    <Icon name='road' />\n                    사다리 만들기      </Header>\n                <Modal.Content>\n                    <Form onSubmit={onSubmit} size='large'>\n\n                    <Form.Field>\n                    <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                           \n                    <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                    </Form.Field>\n                     \n\n                        <p>사다리 이름은 팀, 학습, 동아리 이름을 권장 드립니다. 예) 경영지원팀 사다리</p>\n                        <p>공유할 수 있는 입장 코드를 입력해주세요. 입장코드를 아는 사람들만 들어올 수 있습니다.</p>\n                        <p>입장코드는 암호화되어 관리자도 알 수 없습니다.</p>\n                        <p>민감한 개인정보는 사다리 이름, 입장 코드로 사용하지 마세요</p>\n\n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n                                <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='checkmark' /> 생성\n        </Button>\n        <Button basic color='red' inverted onClick={() => setOpen(false)}>\n                                    <Icon name='remove' /> 취소\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {signUpError &&\n                        <Message negative>\n                            <Message.Header>\n                                사다리 생성 실패!!\n            </Message.Header>\n                            <p>\n                                중복된 이름입니다. 다른 이름을 넣어주세요.\n            </p>\n                        </Message>\n                    }\n                    {signUpSuccess &&\n                        <Message positive>\n                            <Message.Header>\n                                사다리 생성 성공!!\n            </Message.Header>\n                            <p>\n                                <a href={\"/sadari?name=\" + name}>여기</a>를 눌러 사다리로 이동합니다.\n            </p>\n                        </Message>\n                    }\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal>\n\n\n        </>\n    )\n}\n\n\nexport default Home;\n","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport default useQuery;","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible)\n      setVisible(false)\n  }\n\n  const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setExit(true)\n    });\n}, []);\n\nconst history = useHistory()\n\nconst goBack = () => {\n  history.goBack()\n}\n\n\n\n  if(exit) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n          \n        >\n\n          <Menu.Item>\n            <Menu.Header >\n              {userData && userData.name}\n          </Menu.Header>\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/info'\n            \n          >\n            <Icon name='info circle' size=\"large\"/>\n            정보\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/member'\n          >\n            <Icon name='users' size=\"large\" />\n            참가자 관리\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/sadari'\n          >\n            <Icon name='road' size=\"large\" />\n            그냥 사다리\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            한 번씩 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/setting'\n          >\n            <Icon name='setting' size=\"large\" />\n            설정\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          <Menu fixed='top' inverted borderless>\n            <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item>\n            <Menu.Item>\n              <Image size='small' src='logo.png'></Image>\n            </Menu.Item>\n\n\n            <Menu.Menu position='right'>\n              <Menu.Item>\n  \n                  <Button negative fluid onClick={onLogout}>\n                    나가기\n                  </Button>\n    \n              </Menu.Item>\n\n\n            </Menu.Menu>\n          </Menu>\n          <Container style={{ marginTop: '6em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n\n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n                                <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal>\n    </>\n  )\n}\n\nexport default SadariMenu;\n","const ColorTable = [\n    'white',\n    'grey',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n]\n\nconst ColorTableRaw = [\n    '#FFFFFF',\n    '#e8e8e8',\n    '#db2828',\n    '#f2711c',\n    '#fbbd08',\n    '#b5cc18',\n    '#21ba45',\n    '#00b5ad',\n    '#2185d0',\n    '#6435c9',\n    '#a333c8',\n    '#e03997',\n    '#a5673f',\n]\n\nconst getColorById = (id) => {\n    return ColorTable[(id % (ColorTable.length - 2)) + 2]\n}\n\nconst getColorRowById = (id) => {\n    return ColorTableRaw[(id % (ColorTable.length - 2)) + 2]\n}\n\nexport default ColorTable\nexport { ColorTableRaw, getColorById, getColorRowById }\n","import React, { useState } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\nimport { ColorTableRaw } from '../../utils/ColorTable'\n\n\nconst SadariTD = ({ vColor, hColor }) => {\n\n  const hstyle = {\n    // zIndex: 1,\n    // height: '100%',\n    width: '100%',\n    // color: 'red',\n    // borderColor: 'red',\n    // border : '0px solid',\n    borderBottom: '8px solid ' + hColor,\n    // borderLeft: '8px solid ' + ColorTable[vColor], \n    // borderBottom: '6px solid ' + undefined, \n    // borderBottom: '6px solid red', \n    // borderWidth: '19px'\n    // left: '50%',\n    position: 'relative',\n    // position: 'absolute',\n    visibility: hColor? 'visible':'hidden',\n    // float: 'left'\n    // transition: 'border-bottom 0.1s'\n  }\n\n  const vstyle = {\n    // zIndex: 2,\n    width: '100%',\n    height: '100%',\n    // width: '8px',\n    // height: '100%',\n    color: 'red',\n    // borderColor: 'red',\n    // borderStyle: 'solid',\n    borderLeft: '8px solid ' + vColor,\n    // borderLeft: '8px solid black', \n    // borderWidth: '19px'\n    left: '50%',\n    position: 'relative',\n    // float:'left',\n    // transition: 'border-left 0.1s'\n  }\n\n  const tdStyle = {\n    padding: '0px',\n    height: '8px',\n  }\n\n  return (\n    <td style={tdStyle}>\n\n      <div style={vstyle}>\n        <div style={hstyle} />\n      </div>\n\n    </td>\n  )\n}\n\nexport default SadariTD;\n","\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //최댓값은 제외, 최솟값은 포함\n  }\n\n\nexport { getRandomInt }","const timeout = (delay) => new Promise(res => setTimeout(res, delay))\nexport { timeout }","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Menu,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Feed,\n    Label,\n    Input,\n    Transition\n  } from 'semantic-ui-react'\n\nconst EditableInput = props => {\n  // We use hooks to declare \"initial\" states\n  const inputRef = useRef(null);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [text, setText] = useState(props.text);\n\n  function onClickOutSide(e) {\n    // Check if user is clicking outside of <input>\n    if (inputRef.current && !inputRef.current.contains(e.target)) {\n      setInputVisible(false); // Disable text input\n    }\n  }\n\n  useEffect(() => {\n    // Handle outside clicks on mounted state\n    if (inputVisible) {\n      document.addEventListener(\"mousedown\", onClickOutSide);\n    }\n\n    // This is a necessary step to \"dismount\" unnecessary events when we destroy the component\n    return () => {\n      document.removeEventListener(\"mousedown\", onClickOutSide);\n    };\n  });\n\n  return (\n    <React.Fragment>\n      {inputVisible ? (\n        <input\n          ref={inputRef} // Set the Ref\n          value={text} // Now input value uses local state\n          onChange={e => {\n            setText(e.target.value);\n          }}\n          style={{width:'100%'}}\n        />\n      ) : (\n        <Label onClick={() => setInputVisible(true)}>{text}</Label>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default EditableInput; // We got our component!\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Transition,\n  Message\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\n\nimport SadariTD from './SadariTD'\nimport ColorTable, { ColorTableRaw, getColorById, getColorRowById } from '../../utils/ColorTable'\nimport { getRandomInt } from '../../utils/Random'\nimport { timeout } from '../../utils/Timeout'\nimport EditableInput from './EditableText'\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nconst SADARILENGTH = 40\nconst players = ['철수', '영희', '민수', '슬기', '수지', '지수', '영애', '민기']\n\nconst MainSadari = (props) => {\n\n  const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  const members = membersData?.filter((member) => member.status === 1)\n  const verticalCount = SADARILENGTH\n  const horizontalCount = members?.length\n  const connCount = horizontalCount * 3\n  const timeouts = []\n\n  const [lState, setLState] = useState([])\n  const [rState, setRState] = useState([])\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  const resetHandler = useCallback(async (e) => {\n    const arr = []\n\n    for (let i = 0; i < verticalCount; i++) {\n      let verticalArr = []\n\n      for (let j = 0; j < horizontalCount; j++) {\n        let node = { v: ColorTableRaw[1] }\n\n        verticalArr.push(node)\n      }\n      arr.push(verticalArr)\n    }\n\n    setLState(arr)\n    setRState(new Array(horizontalCount).fill(null))\n\n  })\n\n  \n  const replaceHandler = useCallback(async (e) => {\n    for (let i = 0; i < connCount; i++) {\n      const newLState = lState.slice()\n\n      const [vIndex, hIndex] = [getRandomInt(1, verticalCount - 1), getRandomInt(0, horizontalCount - 1)]\n\n      if (newLState[vIndex - 1][hIndex].h || newLState[vIndex + 1][hIndex].h) {\n        continue\n      }\n\n      if (hIndex > 0) {\n        if (newLState[vIndex][hIndex - 1].h) {\n          continue\n        }\n      }\n\n      if (hIndex < horizontalCount - 1) {\n        if (newLState[vIndex][hIndex + 1].h) {\n          continue\n        }\n      }\n\n      newLState[vIndex][hIndex].h = ColorTableRaw[1]\n      setLState(newLState)\n    }\n  })\n\n  useEffect(() => {\n    resetHandler()\n  }, [membersData])\n\n  // useEffect(() => {\n  //   setRState(lState[verticalCount - 1]?.map((node) => node.v - 2))\n  // }, [lState])\n\n\n\n\n\n  const runHandler = useCallback(async (order) => {\n    \n    setIsPlaying(true)\n\n    const startId = order || 0\n    const endId = order + 1 || horizontalCount\n    const newRState = rState.slice()\n\n    for (let i = startId; i < endId; i++) {\n      const current = { h: i, v: 0, color: getColorRowById(members[i].id) }\n      for (let j = 0; j < verticalCount; j++) {\n\n        // if (!isPlaying) {\n        //   return\n        // }\n\n        const newLState = lState.slice()\n        newLState[current.v][current.h].v = current.color\n\n        if (newLState[current.v][current.h - 1]?.h) {\n          current.h = current.h - 1\n          newLState[current.v][current.h].h = current.color\n          newLState[current.v][current.h].v = current.color\n        } else if (newLState[current.v][current.h]?.h) {\n          newLState[current.v][current.h].h = current.color\n          current.h = current.h + 1\n          newLState[current.v][current.h].v = current.color\n        }\n\n        current.v = current.v + 1\n        setLState(newLState)\n        timeouts.push(await timeout(10)) \n\n      }\n      newRState[current.h] = members[i]\n      setRState(newRState)\n    }\n\n    setIsPlaying(false)\n  })\n\n  const stopHandler = useCallback(async () => {\n    for (let i = 0; i < timeouts.length; i++){\n      clearTimeout(timeouts[i])\n    }\n  })\n\n\n\n  return (\n    <>\n      \n\n      <Segment>\n        <table style={{ width: '100%', borderWidth: '0px', borderColor: 'gray', textAlignLast: 'center', borderSpacing: '0px', padding: '0px', tableLayout: 'fixed' }}>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.map((member, index) => (\n\n                  <th key={index}>\n                    <Label as='a' color={getColorById(member.id)} image onClick={() => runHandler(index)}>\n                      <img src={'https://avatars.dicebear.com/api/avataaars/' + member.name + '.svg'} />\n                      {member.name}\n                    </Label>\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <tbody>\n            {\n              lState.map((horizontal, vIndex) => (\n                <tr key={vIndex}>\n                  {horizontal.map((node, hIndex) => (\n                    <SadariTD\n                      vColor={node.v}\n                      hColor={node.h}\n                      key={hIndex}\n                    />\n                  ))}\n                </tr>\n              ))\n            }\n          </tbody>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.map((_, index) => (\n\n                  <th key={index}>\n                    <EditableInput text={index + 1}></EditableInput>\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <thead>\n            <tr>\n                {\n                  rState?.map((member, index) => (\n                    <th key={index}>\n                      { member &&\n                        <Label color={getColorById(member.id)} image>\n                          <img src={'https://avatars.dicebear.com/api/avataaars/' + member.name + '.svg'} />\n                          {member.name}\n                        </Label>\n                      }\n                    </th>\n                  ))\n                }\n            </tr>\n          </thead>\n\n\n        </table>\n      </Segment>\n      {\n        !isPlaying && <Button positive onClick={() => runHandler()}>시작</Button>\n      }\n            {\n        isPlaying && <Button disabled negative onClick={() => stopHandler()}>사다리가 진행 중 입니다</Button>\n      }\n      {\n        !isPlaying && <Button primary onClick={() => replaceHandler()}>선 추가하기</Button>\n      }\n      {\n        !isPlaying && <Button secondary onClick={() => resetHandler()}>리셋</Button>\n      }\n      \n      \n\n      <Message info>\n        <Message.Header>아무 참가자도 보이지 않나요?</Message.Header>\n        <p><a href='/member'>참가자 관리</a>에서 참가자를 추가해 보세요!!</p>\n      </Message>\n      <Message info>\n        <Message.Header>사다리 타기를 시작하려면</Message.Header>\n        <p>시작 버튼을 누르거나 참가자를 클릭하세요!</p>\n      </Message>\n      <Message info>\n        <Message.Header>당첨 내용을 바꾸고 싶나요?</Message.Header>\n        <p>클릭하면 값을 변경할 수 있습니다! 자주 쓰는 당첨 내용 저장 기능도 업데이트 예정이에요!</p>\n      </Message>\n\n    </>\n  )\n}\n\nexport default MainSadari;\n","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Info = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 정보 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n                \n                <h2>\n                    업데이트 상황\n                </h2>\n\n                <ol>\n                    <li>정보 - 스타일 적용 예정</li>\n                    <li>참가자 관리 - 구현 완료</li>\n                    <li>그냥 사다리 - 구현 완료</li>\n                    <li>한 번씩 뽑기 - 업데이트 예정</li>\n                    <li>순서 뽑기 - 업데이트 예정</li>\n                    <li>팀 나누기 - 업데이트 예정</li>\n                    <li>설정 - 업데이트 예정</li>\n                </ol>\n                <p>\n                    \n                </p>\n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Info;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                \n\n             \n                <SadariComponent />\n\n         \n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Once = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Once;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Order = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Order;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Setting = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Setting;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Team = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Team;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\n\n\nconst UserInsert = ({ onCreate }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            }\n        },\n        [name],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    required\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    content='추가'\n                    // unstackable \n                    fluid\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst UserItem = ({ user, onActivate, onDeActivate, onDelete }) => {\n    const { id, name, status } = user\n\n    const color = (id, status) => {\n        if (status === 0) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n        <List.Item>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content>\n            <List.Content verticalAlign='middle'>\n                <Header as='h1' color={color(id, status)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default UserItem","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport UserInsert from './UserInsert'\nimport UserItem from './UserItem'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nconst UserComponent = () => {\n\n    const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const onCreate = useCallback(\n        (name) => {\n            axios\n                .post('/api/members', { name })\n                .then(() => mutate())\n        }, [membersData]\n\n    )\n\n\n    const onActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 1 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onDeActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 0 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n    const onDelete = useCallback(\n        (id) => {\n            axios\n                .delete('/api/members/' + id)\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n\n\n\n    return (\n\n        <Grid>\n            <Grid.Column style={{ maxWidth: 1000 }}>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    사다리 참가자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 1).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                    <UserInsert onCreate={onCreate} />\n                </Segment>\n\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    대기자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 0).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                </Segment>\n            </Grid.Column>\n        </Grid>\n\n\n\n    )\n}\n\nexport default UserComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport UserComponent from '../components/user'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n            <SadariMenu>\n\n                <UserComponent />\n\n            \n         \n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport User from './pages/User'\n\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}