{"version":3,"sources":["utils/useInput.js","utils/useQuery.js","utils/fetcher.js","utils/ColorTable.js","components/sadariMenu/MobileMenu.js","components/memberManager/MemberItem.js","components/memberManager/MemberInsert.js","contexts/memberList.js","components/memberManager/index.js","components/sadari/SadariTD.js","utils/Random.js","utils/Timeout.js","components/sadari/EditableText.js","components/sadari/index.js","pages/Home.js","pages/Info.js","pages/MainSadari.js","components/once/index.js","pages/Once.js","components/order/OrderItem.js","components/order/index.js","pages/Order.js","pages/Setting.js","components/team/TeamItem.js","components/team/index.js","pages/Team.js","components/seat/SeatCols.js","contexts/Media.js","components/seat/SeatList.js","components/seat/index.js","pages/Seat.js","components/user/UserInsert.js","components/user/UserItem.js","components/user/index.js","pages/User.js","components/question/QuestionItem.js","components/question/QuestionList.js","components/question/index.js","pages/Question.js","MobileApp.js","components/sadariMenu/DesktopMenu.js","DesktopApp.js","App.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","useCallback","e","target","useQuery","URLSearchParams","useLocation","search","fetcher","url","axios","get","withCredentials","then","response","data","ColorTable","ColorTableRaw","getColorById","id","length","SadariMenu","props","visible","setVisible","pcVisible","setPcVisible","toggleVisible","name","password","setLoginError","setExit","preventDefault","trim","post","mutate","catch","err","setTimeout","useEffect","timer","clearTimeout","Sidebar","Pushable","as","Menu","animation","icon","inverted","vertical","size","borderless","width","Item","Link","to","onClick","Icon","Pusher","dimmed","style","minHeight","margin","Image","src","position","padding","Transition","duration","Message","info","header","content","Container","marginTop","children","MemberItem","member","isBig","active","Label","image","color","display","verticalAlign","height","slice","faker","locale","UserInsert","onCreate","memberList","onChangeName","setName","onSubmit","firstName","Form","Group","unstackable","Input","placeholder","onChange","Button","fluid","primary","MemberListContext","createContext","once","MemberListProvider","setMemberList","Provider","useMemberList","useContext","MemberManager","onDelete","filter","onToggle","map","concat","Grid","columns","stackable","relaxed","Row","React","cloneElement","Divider","Column","Segment","secondary","Header","textAlign","MemberInsert","href","download","onFileLoaded","fileInfo","newMemberList","row","push","parserOptions","dynamicTyping","skipEmptyLines","negative","SadariTD","vColor","hColor","hstyle","borderBottom","visibility","vstyle","borderLeft","left","getRandomInt","min","max","Math","ceil","floor","random","timeout","delay","Promise","res","EditableInput","inputRef","useRef","inputVisible","setInputVisible","text","setText","onClickOutSide","current","contains","document","addEventListener","removeEventListener","Fragment","ref","MainSadari","members","horizontalCount","connCount","timeouts","lState","setLState","rState","setRState","cover","setCover","isPlaying","setIsPlaying","isOne","setIsOne","resetHandler","a","arr","i","verticalArr","j","node","v","verticalCount","hIndex","vIndex","h","Array","fill","runHandler","order","startId","endId","newRState","newLState","stopHandler","borderWidth","borderColor","textAlignLast","borderSpacing","tableLayout","index","zIndex","top","centered","horizontal","_","positive","disabled","floated","warning","Info","basic","container","fontSize","bordered","rounded","DiscussionEmbed","shortname","OrderComponent","activeMemberList","selectedMemberList","unSelectedMemberList","selectedMember","setSelectedMember","onSelect","selectedIndex","selectedId","onReset","raised","stacked","Once","OrderItem","List","Content","avatar","shuffle","array","randomIndex","currentIndex","shuffledData","setShuffledData","onShuffle","divided","Order","Setting","TeamItem","team","teamData","setTeamData","options","setOptions","currentValue","setCurrentValue","onChangeOptions","newOptions","option","key","onSetTeam","result","unit","Dropdown","selection","compact","Team","SeatList","cols","Table","col","Cell","createMedia","breakpoints","sm","lg","MediaContextProvider","Media","rows","block","at","Body","SeatCols","greaterThanOrEqual","setRows","onSetSeat","total","required","UserItem","user","onActivate","onDeActivate","status","UserComponent","useSWR","membersData","patch","delete","maxWidth","QuestionItem","question","QuestionList","defaultQuestion","endQuestion","setQuestion","currentQuestionList","setCurrentQuestionList","console","log","App","MobileMenu","exact","path","User","Seat","Question","DesktopMenu","MobileApp","DesktopApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c06ff734.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const handler = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport default useQuery;","import axios from 'axios';\n\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((response) => response.data);\n\nexport default fetcher;","const ColorTable = [\n    'white',\n    'grey',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n]\n\nconst ColorTableRaw = [\n    '#FFFFFF',\n    '#e8e8e8',\n    '#db2828',\n    '#f2711c',\n    '#fbbd08',\n    '#b5cc18',\n    '#21ba45',\n    '#00b5ad',\n    '#2185d0',\n    '#6435c9',\n    '#a333c8',\n    '#e03997',\n    '#a5673f',\n]\n\nconst getColorById = (id) => {\n    return ColorTable[(id % (ColorTable.length - 2)) + 2]\n}\n\nconst getColorRowById = (id) => {\n    return ColorTableRaw[(id % (ColorTable.length - 2)) + 2]\n}\n\nexport default ColorTable\nexport { ColorTableRaw, getColorById, getColorRowById }\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message,\n  Transition,\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\nimport MemberListButton from './MemberListButton'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const [pcVisible, setPcVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible) {\n            setVisible(false)\n    }\n  }\n\n\n  // const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setTimeout(() => {\n        setExit(true)\n      }, 500)\n    });\n}, []);\n\n\nuseEffect(() => {\n  const timer = setTimeout(() => setPcVisible(true), 2000)\n\n  return () => clearTimeout(timer)\n}, [])\n\n// const history = useHistory()\n\n// const goBack = () => {\n//   history.goBack()\n// }\n\n\n\n//   if(exit) {\n//     return <Redirect to=\"/\" />\n//   }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          // onHide={() => setVisible(false)}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n        >\n\n<Menu.Item\n            as={Link}\n            to='/sadari'\n            onClick={toggleVisible}\n          >\n            <Icon name='road' size=\"large\" />\n            사다리 타기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n            onClick={toggleVisible}\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n            onClick={toggleVisible}\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            랜덤 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n            onClick={toggleVisible}\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/seat'\n            onClick={toggleVisible}\n          >\n            <Icon name='street view' size=\"large\" />\n            자리 배치\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/question'\n            onClick={toggleVisible}\n          >\n            <Icon name='question' size=\"large\" />\n            그냥질문지\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/info'\n            onClick={toggleVisible}\n          >\n            <Icon name='info circle' size=\"large\" />\n            이건 뭔가요?\n          </Menu.Item>\n\n\n\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          {/* <Menu fixed='top' inverted borderless> */}\n          <Menu \n            inverted\n            style={{ margin: '10px' }}\n            borderless\n            size='tiny'\n            >\n\n            {/* <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item> */}\n\n<Menu.Item\n            as={Link}\n            to='/'\n          >\n              <Image size='tiny' src='logo.png'></Image>\n            </Menu.Item>\n            {/* <Menu.Item\n            as={Link}\n            to='/order'\n          >\n              순서뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/once'\n          >\n              랜덤뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/team'\n          >\n              팀나누기\n            </Menu.Item> */}\n\n\n\n            <Menu.Menu position='right'>\n\n\n              <Menu.Item\n              onClick={toggleVisible}\n              style={{padding: '1em'}}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0', padding: '0' }}\n              />\n            </Menu.Item>\n\n    \n\n\n            </Menu.Menu>  \n\n          </Menu>\n          \n          {/* <Segment\n            style={{ margin: '10px'}}\n            secondary\n          \n          >\n\n            <Button icon positive>\n              <Icon name='plus' />\n              </Button>\n            \n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            \n          </Segment> */}\n\n          <Transition\n            animation='bounce'\n            duration={1000}\n            visible={pcVisible}\n            >\n\n                    <Message \n                    info \n                    style={{margin:'10px'}} \n                    // onDismiss={() => {setPcVisible(false)\n                    //    console.log('hh')}}\n                    header='PC에서 조금 더 잘보입니다'\n                    content='인터넷 창을 켜고 sadari.app을 쳐보세요'\n                    onClick={() => setPcVisible(false)}\n                    />\n                    </Transition>\n\n\n\n\n\n\n          <Container style={{ marginTop: '2em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n{/* \n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal> */}\n    </>\n  )\n}\n\nexport default SadariMenu;\n","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst MemberItem = ({member, onClick, isBig, size}) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n    const shortedName = () => {\n        if (name.length > 5) {\n            return name.slice(0, 5) + '..'\n        }\n        \n        return name\n    }\n\n    return (\n\n        <Label size={size ? size:'small'} image color={color(id, active)} key={id} as='a' \n        onClick={onClick ? () => onClick(id) : {}}\n        style={isBig ? {display: 'table-cell', verticalAlign: 'middle', height: '150px'} : {margin: '0.1em'}}\n        >\n        <img src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n        {shortedName()}\n        \n    </Label>\n\n\n    )\n}\n\nexport default MemberItem","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\nimport faker from 'faker'\n\nfaker.locale = \"ko\"\n\nconst UserInsert = ({ onCreate, memberList }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            } else {\n                onCreate(faker.name.firstName())\n                setName('')\n            }\n        },\n        [name, memberList],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    icon='plus'\n                    // unstackable \n                    fluid\n                    primary\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { createContext ,useContext,useState } from 'react'\n\nconst MemberListContext = createContext([\n    {\n        id: 1,\n        name: '철수',\n        active: true,\n        once: false, \n    },\n    {\n        id: 2,\n        name: '영희',\n        active: true,\n        once: false, \n    },\n    {\n        id: 3,\n        name: '민수',\n        active: false,\n        once: false, \n    },\n    {\n        id: 4,\n        name: '수연',\n        active: true,\n        once: false, \n    },\n])\n\nconst MemberListProvider = ({ children }) => {\n    const [memberList, setMemberList] = useState([\n        {\n            id: 1,\n            name: '철수',\n            active: true,\n            once: false, \n        },\n        {\n            id: 2,\n            name: '영희',\n            active: true,\n            once: false, \n        },\n        {\n            id: 3,\n            name: '민수',\n            active: false,\n            once: false, \n        },\n        {\n            id: 4,\n            name: '수연',\n            active: true,\n            once: false, \n        },\n    ])\n    \n    return (\n        <MemberListContext.Provider value={{ memberList, setMemberList}}>\n            {children}\n        </MemberListContext.Provider>\n    )\n}\n\nconst useMemberList = () => useContext(MemberListContext)\n\nexport { MemberListProvider }\n\nexport default useMemberList","import React, { useCallback, useRef, useState, useContext } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    GridRow\n} from 'semantic-ui-react'\n\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport MemberItem from './MemberItem'\nimport MemberInsert from './MemberInsert'\nimport useMemberList from '../../contexts/memberList'\n\nimport CSVReader from 'react-csv-reader'\nimport styles from \"./styles.css\";\n\n\nconst MemberManager = (props) => {\n\n    const { memberList, setMemberList } = useMemberList()\n\n    const handleForce = (data, fileInfo) => {\n\n        const newMemberList = []\n        \n        data.map((row, id) => {\n            newMemberList.push({\n                id,\n                name: row[0],\n                active: true,\n                once: false,\n            })\n        })\n\n        setMemberList(newMemberList)\n\n    }\n\n    const papaparseOptions = {\n        header: false,\n        dynamicTyping: true,\n        skipEmptyLines: true,\n        // transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n      };\n\n    // const [memberList, setMemberList] = useState([\n    //     {\n    //         id: 1,\n    //         name: '철수',\n    //         active: true,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 2,\n    //         name: '영희',\n    //         active: true,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 3,\n    //         name: '민수',\n    //         active: false,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 4,\n    //         name: '수연',\n    //         active: true,\n    //         once: true, \n    //     },\n    // ])\n\n    // const nextId = useRef(5)\n\n\n\n\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    // const onCreate = useCallback(\n    //     (name) => {\n    //         axios\n    //             .post('/api/members', { name })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n\n    // const onActivate = useCallback(\n    //     (id) => {\n    //         axios\n    //             .patch('/api/members/' + id, { status: 1 })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n\n    // const onDeActivate = useCallback(\n    //     (id) => {\n    //         axios\n    //             .patch('/api/members/' + id, { status: 0 })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n    // const onDelete = useCallback(\n    //     (id) => {\n    //         axios\n    //             .delete('/api/members/' + id)\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n    const onDelete = useCallback(() => {\n        setMemberList(\n            memberList.filter(member => member.active === true)\n        )\n    }, [memberList])\n\n\n    const onToggle = useCallback((id) => {\n        setMemberList(\n            memberList.map(member =>\n                member.id === id ? { ...member, active: !member.active} : member\n            )\n        )\n    }, [memberList])\n\n    const onCreate = useCallback((name) => {\n        const member = {\n            id: memberList[memberList.length - 1].id + 1,\n            name,\n            active: true,\n            once: false,\n        }\n        setMemberList(memberList.concat(member))\n    }, [memberList])\n\n\n    return (\n\n        <Grid columns='equal' stackable relaxed >\n\n    \n        <Grid.Row>\n        {React.cloneElement(props.children)}\n        </Grid.Row>\n\n        <Divider />\n\n\n        <Grid.Row>\n            <Grid.Column>\n                <Segment secondary>\n\n        <Header as='h3' textAlign='center'>\n            참가자 명단 : {memberList.filter((member) => member.active === true).length} 명\n        </Header>\n                <Segment textAlign=\"center\">\n                    {\n                        memberList.filter((member) => member.active === true).map((member) => \n                        <MemberItem \n                            member={member} \n                            onClick={onToggle}\n                        />)\n                    }\n\n                </Segment>\n\n                <MemberInsert onCreate={onCreate} memberList={memberList} />\n\n                <Divider />\n\n                <Header as='h3' textAlign='center'>\n            csv 업로드 [<a href='/csv_sample.csv' download>샘플파일</a>]\n        </Header>\n\n\n        <CSVReader\n    //   cssClass=\"react-csv-input\"\n    //   label=\"Select CSV with secret Death Star statistics\"\n      onFileLoaded={handleForce}\n      parserOptions={papaparseOptions}\n    //   style={{width: '100%'}}\n    //   cssInputClass={styles.csvInput}\n    />\n\n                    </Segment>\n            </Grid.Column>\n\n            <Grid.Column>\n                <Segment secondary>\n            <Header as='h3' textAlign='center'>\n                대기자 명단 : {memberList.filter((member) => member.active === false).length} 명\n        </Header>\n                <Segment textAlign=\"center\">\n                {\n                        memberList.filter((member) => member.active === false).map((member) => \n                        <MemberItem \n                            member={member}\n                            onClick={onToggle}\n                        />)\n                    }\n\n                </Segment>\n\n                <Button negative fluid onClick={() => onDelete()}>\n                    대기자 모두 삭제\n                    </Button>\n\n                <Message info>\n        <Message.Header>참가자의 상태를 변경하려면?</Message.Header>\n        <p>명단의 이름을 클릭하세요</p>\n      </Message>\n\n                    </Segment>\n\n            </Grid.Column>\n\n\n\n\n        </Grid.Row>\n\n        <Divider />\n\n\n    </Grid>\n\n\n\n\n\n\n\n\n\n\n\n\n        // <Grid>\n        //     <Grid.Column style={{ maxWidth: 1000 }}>\n        //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n        //             사다리 참가자\n        //     </Header>\n        //         <Segment stacked>\n        //             <List\n        //                 // celled\n        //                 divided\n        //                 // selection\n        //                 size=\"massive\"\n        //                 // inverted\n        //                 relaxed\n        //             // verticalAlign=\"middle\"\n        //             >\n        //                 {\n        //                     membersData &&\n        //                     membersData.filter((user) => user.status === 1).map((user) => (\n        //                         <UserItem\n        //                             user={user}\n        //                             key={user.id}\n        //                             onActivate={onActivate}\n        //                             onDeActivate={onDeActivate}\n        //                             onDelete={onDelete}\n        //                         />\n        //                     )\n        //                     )\n        //                 }\n        //             </List>\n        //             <UserInsert onCreate={onCreate} />\n        //         </Segment>\n\n        //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n        //             대기자\n        //     </Header>\n        //         <Segment stacked>\n        //             <List\n        //                 // celled\n        //                 divided\n        //                 // selection\n        //                 size=\"massive\"\n        //                 // inverted\n        //                 relaxed\n        //             // verticalAlign=\"middle\"\n        //             >\n        //                 {\n        //                     membersData &&\n        //                     membersData.filter((user) => user.status === 0).map((user) => (\n        //                         <UserItem\n        //                             user={user}\n        //                             key={user.id}\n        //                             onActivate={onActivate}\n        //                             onDeActivate={onDeActivate}\n        //                             onDelete={onDelete}\n        //                         />\n        //                     )\n        //                     )\n        //                 }\n        //             </List>\n        //         </Segment>\n        //     </Grid.Column>\n        // </Grid>\n\n\n\n    )\n}\n\nexport default MemberManager","import React, { useState } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\nimport { ColorTableRaw } from '../../utils/ColorTable'\n\n\nconst SadariTD = ({ vColor, hColor }) => {\n\n  const hstyle = {\n    // zIndex: 1,\n    // height: '100%',\n    width: '100%',\n    // color: 'red',\n    // borderColor: 'red',\n    // border : '0px solid',\n    borderBottom: '8px solid ' + hColor,\n    // borderLeft: '8px solid ' + ColorTable[vColor], \n    // borderBottom: '6px solid ' + undefined, \n    // borderBottom: '6px solid red', \n    // borderWidth: '19px'\n    // left: '50%',\n    position: 'relative',\n    // position: 'absolute',\n    visibility: hColor? 'visible':'hidden',\n    // float: 'left'\n    // transition: 'border-bottom 0.1s'\n  }\n\n  const vstyle = {\n    // zIndex: 2,\n    width: '100%',\n    height: '100%',\n    // width: '8px',\n    // height: '100%',\n    color: 'red',\n    // borderColor: 'red',\n    // borderStyle: 'solid',\n    borderLeft: '8px solid ' + vColor,\n    // borderLeft: '8px solid black', \n    // borderWidth: '19px'\n    left: '50%',\n    position: 'relative',\n    // float:'left',\n    // transition: 'border-left 0.1s'\n  }\n\n  const tdStyle = {\n    padding: '0px',\n    height: '8px',\n  }\n\n  return (\n    <td style={tdStyle}>\n\n      <div style={vstyle}>\n        <div style={hstyle} />\n      </div>\n\n    </td>\n  )\n}\n\nexport default SadariTD;\n","\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //최댓값은 제외, 최솟값은 포함\n  }\n\n\nexport { getRandomInt }","const timeout = (delay) => new Promise(res => setTimeout(res, delay))\nexport { timeout }","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Menu,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Feed,\n    Label,\n    Input,\n    Transition\n  } from 'semantic-ui-react'\n\nconst EditableInput = props => {\n  // We use hooks to declare \"initial\" states\n  const inputRef = useRef(null);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [text, setText] = useState(props.text);\n\n  function onClickOutSide(e) {\n    // Check if user is clicking outside of <input>\n    if (inputRef.current && !inputRef.current.contains(e.target)) {\n      setInputVisible(false); // Disable text input\n    }\n  }\n\n  useEffect(() => {\n    // Handle outside clicks on mounted state\n    if (inputVisible) {\n      document.addEventListener(\"mousedown\", onClickOutSide);\n    }\n\n    // This is a necessary step to \"dismount\" unnecessary events when we destroy the component\n    return () => {\n      document.removeEventListener(\"mousedown\", onClickOutSide);\n    };\n  });\n\n  return (\n    <React.Fragment>\n      {inputVisible ? (\n        <input\n          ref={inputRef} // Set the Ref\n          value={text} // Now input value uses local state\n          onChange={e => {\n            setText(e.target.value);\n          }}\n          style={{width:'100%'}}\n        />\n      ) : (\n        <Label onClick={() => setInputVisible(true)}>{text}</Label>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default EditableInput; // We got our component!\n","import React, { useCallback, useEffect, useState, useContext } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Transition,\n  Message\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\n\nimport SadariTD from './SadariTD'\nimport ColorTable, { ColorTableRaw, getColorById, getColorRowById } from '../../utils/ColorTable'\nimport { getRandomInt } from '../../utils/Random'\nimport { timeout } from '../../utils/Timeout'\nimport EditableInput from './EditableText'\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport faker from 'faker'\nimport axios from 'axios'\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\n\n\n\n\nfaker.locale = \"ko\"\n\nconst SADARILENGTH = 60\n\nconst MainSadari = () => {\n\n  const { memberList } = useMemberList()\n\n  // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  const members = memberList?.filter((member) => member.active === true)\n  const verticalCount = SADARILENGTH\n  const horizontalCount = members?.length\n  const connCount = (horizontalCount-1) * (getRandomInt(3,6))\n  const timeouts = []\n\n  const [lState, setLState] = useState([])\n  const [rState, setRState] = useState([])\n  const [cover, setCover] = useState(false)\n\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isOne, setIsOne] = useState(false)\n\n  const resetHandler = useCallback(async (e) => {\n    const arr = []\n\n    for (let i = 0; i < verticalCount; i++) {\n      let verticalArr = []\n\n      for (let j = 0; j < horizontalCount; j++) {\n        let node = { v: ColorTableRaw[1] }\n\n        verticalArr.push(node)\n      }\n      arr.push(verticalArr)\n    }\n\n    for (let i = 0; i < connCount; i++) {\n      const [vIndex, hIndex] = [getRandomInt(1, verticalCount - 1), getRandomInt(0, horizontalCount - 1)]\n\n      if (arr[vIndex - 1][hIndex]?.h || arr[vIndex + 1][hIndex]?.h) {\n        continue\n      }\n\n      if (hIndex > 0) {\n        if (arr[vIndex][hIndex - 1]?.h) {\n          continue\n        }\n      }\n\n      if (hIndex < horizontalCount - 1) {\n        if (arr[vIndex][hIndex + 1]?.h) {\n          continue\n        }\n      }\n\n      arr[vIndex][hIndex].h = ColorTableRaw[1]\n\n    }\n\n\n    setLState(arr)\n    setRState(new Array(horizontalCount).fill(null))\n\n\n  })\n  // resetHandler()\n\n\n  useEffect(() => {\n    resetHandler()\n  }, [memberList])\n\n  // useEffect(() => {\n  //   setRState(lState[verticalCount - 1]?.map((node) => node.v - 2))\n  // }, [lState])\n\n  const runHandler = useCallback(async (order) => {\n\n    if(members.length < 2) {\n      setIsOne(true)\n      return\n    }\n\n    setIsOne(false)\n\n    setIsPlaying(true)\n\n    const startId = order || 0\n    const endId = order + 1 || horizontalCount\n    const newRState = rState.slice()\n\n\n    for (let i = startId; i < endId; i++) {\n      const current = { h: i, v: 0, color: getColorRowById(members[i].id) }\n      for (let j = 0; j < verticalCount; j++) {\n\n        // if (!isPlaying) {\n        //   return\n        // }\n\n        const newLState = lState.slice()\n        newLState[current.v][current.h].v = current.color\n\n        if (newLState[current.v][current.h - 1]?.h) {\n          current.h = current.h - 1\n          newLState[current.v][current.h].h = current.color\n          newLState[current.v][current.h].v = current.color\n        } else if (newLState[current.v][current.h]?.h) {\n          newLState[current.v][current.h].h = current.color\n          current.h = current.h + 1\n          newLState[current.v][current.h].v = current.color\n        }\n\n        current.v = current.v + 1\n        setLState(newLState)\n        timeouts.push(await timeout(20))\n\n      }\n      newRState[current.h] = members[i]\n      setRState(newRState)\n    }\n\n    setIsPlaying(false)\n  })\n\n  const stopHandler = useCallback(async () => {\n    for (let i = 0; i < timeouts.length; i++) {\n      clearTimeout(timeouts[i])\n    }\n  })\n\n//   const onCreate = useCallback(\n//     (name) => {\n//         axios\n//             .post('/api/members', { name })\n//             .then(() => mutate())\n//     }, [membersData]\n// )\n\n// const onDelete = useCallback(\n//   (id) => {\n//       axios\n//           .delete('/api/members/' + id)\n//           .then(() => mutate())\n//   }, [membersData]\n// )\n\n\n  return (\n    <>\n\n\n      <Segment>\n        <table style={{ width: '100%', borderWidth: '0px', borderColor: 'gray', textAlignLast: 'center', borderSpacing: '0px', padding: '0px', tableLayout: 'fixed' }}>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.filter((member) => member.active === true).map((member, index) => (\n\n                  <th key={index}>\n                    <MemberItem member={member} onClick={() => runHandler(index)} />\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <tbody style={{position:'relative'}}>\n          {\n            cover &&\n            <Image style={{position:'absolute', zIndex:4, width:'100%', height: '60%', top:'20%'}} centered src=\"cover.png\" />\n\n          }\n\n            {\n              lState.map((horizontal, vIndex) => (\n                <tr key={vIndex} style={{position:'relative'}}>\n                  {horizontal.map((node, hIndex) => (\n                    <SadariTD\n                      vColor={node.v}\n                      hColor={node.h}\n                      key={hIndex}\n                    />\n                  ))}\n                </tr>\n              ))\n            }\n          </tbody>\n          <thead>\n            <tr>\n              {\n                rState?.map((member, index) => (\n                  <th key={index}>\n                    {member &&\n\n                  <MemberItem member={member}/>\n\n                    }\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.map((_, index) => (\n\n                  <th key={index}>\n                    <EditableInput text={index + 1}></EditableInput>\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n\n\n\n        </table>\n      </Segment>\n\n      <Segment style={{width:'100%'}}>\n      {\n        !isPlaying && <Button positive onClick={() => runHandler()}>시작</Button>\n      }\n      {\n        isPlaying && <Button disabled negative onClick={() => stopHandler()}>사다리가 진행 중 입니다</Button>\n      }\n      {\n        !isPlaying && <Button negative onClick={() => resetHandler()}>리셋</Button>\n      }\n\n      {\n        !cover && <Button floated='right' secondary onClick={() => setCover(true)}>가림막 켜기</Button>\n      }\n\n{\n        cover && <Button floated='right' secondary onClick={() => setCover(false)}>가림막 끄기</Button>\n      }\n\n\n\n\n\n{\n        isOne &&\n        <Message warning>\n        <Message.Header>참가자 숫자 오류</Message.Header>\n        <p>참가자 숫자가 부족합니다.</p>\n      </Message>\n\n      }\n\n\n      <Message info>\n        <Message.Header>사다리 타기를 시작하려면</Message.Header>\n        <p>시작 버튼을 누르거나 참가자를 클릭하세요! 당첨 내용을 클릭하면 값을 바꿀 수 있습니다!</p>\n\n      </Message>\n\n\n\n</Segment>\n\n\n\n\n    </>\n  )\n}\n\nexport default MainSadari;\n","import React, { useState, useCallback, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Modal,\n    Input,\n    Form,\n    Message\n} from 'semantic-ui-react'\nimport { Link, Redirect } from 'react-router-dom'\nimport useInput from '../utils/useInput'\nimport fetcher from '../utils/fetcher'\nimport axios from 'axios'\nimport useSWR from 'swr'\nimport moment from 'moment'\nimport faker from 'faker'\n\nfaker.locale = \"ko\"\n\nconst Home = () => {\n\n    const { data: userData } = useSWR('/api/auth', fetcher)\n    const { data: usersData, mutate } = useSWR('/api/users', fetcher)\n\n    const [detail, setDetail] = useState(true)\n    const [open, setOpen] = useState(false)\n\n    const [name, onChangeName] = useInput('')\n    const [password, onChangePassword] = useInput('')\n\n    const [signUpError, setSignUpError] = useState(false)\n    const [signUpSuccess, setSignUpSuccess] = useState(false)\n\n    const onSubmit = useCallback(\n        (e) => {\n            e.preventDefault()\n\n            if (!name || !name.trim()) {\n                return\n            }\n\n            setSignUpError(false)\n            setSignUpSuccess(false)\n            axios\n                .post('/api/auth/join', { name, password })\n                .then(() => {\n                    setSignUpSuccess(true)\n                    mutate()\n                })\n                .catch((err) => {\n                    setSignUpError(true)\n                })\n\n        }, [name, password]\n    )\n\n    if (userData) {\n        return <Redirect to=\"/sadari\" />\n    }\n\n    // if (setSignUpSuccess) {\n    //     return <Redirect to=\"/sadari\" />\n    // }\n\n    return (\n        <>\n\n            <Segment\n                inverted\n                textAlign='center'\n                style={{ minHeight: 400, padding: '1em 0em' }}\n                vertical\n            >\n                <Container text>\n\n                    <Image\n                        size=\"large\"\n                        src='logo.png'\n                        centered\n                        style={{ padding: '1em' }}\n                    />\n                    {/* <Header>\n                        {cname}\n                    </Header> */}\n                    <Header\n                        as='h1'\n                        content='지금까지의 사다리타기는 잊어라!'\n                        inverted\n                    />\n\n                    <Header\n                        as='h1'\n                        content=\"편의성을 극대화한 '그냥' 사다리\"\n                        inverted\n                    />\n\n                    <Button primary size=\"huge\" style={{ margin: '1em' }} onClick={() => setOpen(true)}>\n                        일단 만들어 보기\n                        <Icon name='right arrow' />\n\n                    </Button>\n                </Container>\n            </Segment>\n\n            {\n                detail &&\n\n                <Segment style={{ padding: '4em 0em' }} vertical basic>\n                    <Grid container stackable verticalAlign='middle'>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    최고의 사용자 경험을 추구합니다\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    이름은 '그냥' 사다리지만 결코 '그냥' 만들진 않습니다.\n                                    매일매일 같은 사람들 이름을 입력하느라 손가락이 고생하지 않도록, 철수는 1번, 영희는 2번 하느라 헷갈릴 일 없게\n                                    '그냥' 사다리가 도와드리겠습니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    공유 가능한 사다리\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    사다리를 만들면서 입력한 패스코드를 공유하면 누구나 접근하여 사다리를 탈 수 있습니다.\n                                    참가자도 관리하고 결과도 공유해보면서 사다리를 타보세요!\n            </p>\n                            </Grid.Column>\n                            <Grid.Column floated='right' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari.png' />\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column textAlign='center'>\n                                <Button size='huge' style={{ margin: '2em' }} onClick={() => setDetail(false)}>알고 있어요</Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column floated='left' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari2.png' />\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    참가자 관리는 한 번만\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을 등록하고 다양한 게임을 진행해보세요!\n                                    '그냥' 사다리부터 안 뽑힌 사람 뽑는 '한 번씩 뽑기', 한번에 순서를 쫙! '순서 뽑기', 팀 나누기 애매할땐 '팀 나누기' 등 다양한 기능이 업데이트 예정입니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    아바타로 더 잘 구분하자\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    참가자를 추가하면서 아바타를 골라보세요. 랜덤으로 생성되는 수백개의 아바타가 여러분을 기다립니다.\n            </p>\n                            </Grid.Column>\n\n                        </Grid.Row>\n\n                    </Grid>\n                </Segment>\n            }\n\n            <Segment style={{ padding: '4em 0em' }} vertical basic padded>\n                <Card.Group stackable centered>\n                {/* <Link to=\"/sadari\"> */}\n                    {/* <Card>\n                        \n                        <Button primary fluid as={Link} to='/sadari' style={{ height: '100%', verticalAlign:'middle'}}>직접 입력해서 시작하기</Button>\n\n          \n                        \n                    </Card> */}\n                    {/* </Link> */}\n                    {\n                        usersData &&\n                        (usersData.map((user, i) => (\n                            <Card key={i}>\n                                {/* <Image src='ladder.png' wrapped ui={true} fluid></Image> */}\n\n                                <Card.Content>\n                                    <Image avatar floated='right' src={'https://avatars.dicebear.com/api/avataaars/' + user.name + '.svg'} />\n                                    <Card.Header>\n                                        {user.name}\n                        </Card.Header>\n                                    <CardDescription>\n                                    마지막 접속 : {user.loginAt && moment(user.loginAt).format('YYYY-MM-DD HH:mm:ss')}\n                        </CardDescription>\n                                </Card.Content>\n                                {/* <Card.Content extra>\n                        <Icon name='user' /> 10명의 참가자\n                    </Card.Content> */}\n                                <Card.Content extra>\n                                    <Button positive fluid as={Link} to={'/sadari?name=' + user.name}>\n                                        참가\n                        </Button>\n                                </Card.Content>\n                            </Card>\n                        )\n\n                        ))\n                    }\n\n\n                </Card.Group>\n\n            </Segment>\n\n\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n                <Header icon>\n                    <Icon name='road' />\n                    사다리 만들기      </Header>\n                <Modal.Content>\n                    <Form onSubmit={onSubmit} size='large'>\n\n                    <Form.Field>\n                    <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                           \n                    <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                    </Form.Field>\n                     \n\n                        <p>사다리 이름은 팀, 학습, 동아리 이름을 권장 드립니다. 예) 경영지원팀 사다리</p>\n                        <p>공유할 수 있는 입장 코드를 입력해주세요. 입장코드를 아는 사람들만 들어올 수 있습니다.</p>\n                        <p>입장코드는 암호화되어 관리자도 알 수 없습니다.</p>\n                        <p>민감한 개인정보는 사다리 이름, 입장 코드로 사용하지 마세요</p>\n\n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button color='red' inverted onClick={() => setOpen(false)}>\n                                    <Icon name='remove' /> 취소\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='checkmark' /> 생성\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {signUpError &&\n                        <Message negative>\n                            <Message.Header>\n                                사다리 생성 실패!!\n            </Message.Header>\n                            <p>\n                                중복된 이름입니다. 다른 이름을 넣어주세요.\n            </p>\n                        </Message>\n                    }\n                    {signUpSuccess &&\n                        <Message positive>\n                            <Message.Header>\n                                사다리 생성 성공!!\n            </Message.Header>\n                            <p>\n                                <mark><a href={\"/sadari?name=\" + name}>여기</a></mark>를 눌러 사다리로 이동합니다.\n            </p>\n                        </Message>\n                    }\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal>\n\n\n        </>\n    )\n}\n\n\nexport default Home;\n","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nimport Disqus from \"disqus-react\"\n\nconst Info = () => {\n\n    const disqusShortname = \"sadari\"\n\n    return (\n        <>\n                <Segment vertical basic>\n                    <Grid container stackable verticalAlign='middle'>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    완전 무료 사다리 '그냥' 사다리\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    이 사이트는 취미로 만들어진 사이트입니다. <br />\n                                    사다리 타기 외에도 다양한 기능을 탑재하여 원격수업과 랜선회식에서 사용할 수 있습니다! <br />\n                                    많이 많이 쓰고 주변에 알려주세요\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    매번 이름 입력하기 힘드시죠?\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    csv 업로드통해 한번에 관리하고 로그인 기능(추가 예정)을 통해 명단을 저장해놓을 수 있습니다.\n            </p>\n                            </Grid.Column>\n                            <Grid.Column floated='right' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari.png' />\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column floated='left' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari2.png' />\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    참가자 관리는 한 번만\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을 등록하고 다양한 게임을 진행해보세요!\n    \n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    아바타로 더 잘 구분하자\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    참가자를 추가될 대 랜덤으로 아바타가 생성됩니다. 무엇이 만들어지는지 한번 지켜보세요!\n            </p>\n                            </Grid.Column>\n\n                        </Grid.Row>\n<Divider />\n                        <Grid.Row>\n                        <Message negative style={{width:'100%'}}>\n                    <Message.Header>\n                    정보 및 공지 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        업데이트 상황 및 건의사항은 아래 내용을 참고해주세요!!\n                    </p>\n                </Message>\n                \n\n                        </Grid.Row>\n\n                        <Grid.Row>\n                            <Segment style={{width:'100%'}}>\n                            <Header as='h3' style={{ fontSize: '2em' }}>\n                                업데이트 일정\n            </Header>\n\n            <p style={{ fontSize: '1.33em' }}>\n            사다리타기 - 구현 완료 <br />\n            순서뽑기 - 구현 완료 <br />\n            랜덤뽑기 - 구현 완료 <br />\n            팀나누기 - 구현 완료 <br />\n            자리배치 - 구현 완료 <br />\n            로그인 및 명단 저장 - 구현 예정\n                </p>\n\n\n                    <Header as='h3' style={{ fontSize: '2em' }}>\n                                공지사항\n            </Header>\n            \n            <p style={{ fontSize: '1.33em' }}>\n                건의사항이 있을 경우 아래에 코멘트로 달아주세요!!\n            </p>\n\n\n\n\n                                </Segment>\n\n\n\n\n                      \n\n                        </Grid.Row>\n\n                    </Grid>\n\n                </Segment>\n\n                <Disqus.DiscussionEmbed\n          shortname={disqusShortname}\n        //   config={disqusConfig}\n        />\n\n        </>\n    )\n}\n\n\nexport default Info;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariComponent from '../components/sadari'\nimport MemberManager from '../components/memberManager'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n\n<MemberManager>\n                <SadariComponent />\n                </MemberManager>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList, setMemberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n    const selectedMemberList = activeMemberList.filter((member) => member.once === true)\n    const unSelectedMemberList = activeMemberList.filter((member) => member.once === false)\n\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const [selectedMember, setSelectedMember] = useState(null)\n    const [visible, setVisible] = useState(false)\n\n    const onToggle = useCallback((id) => {\n        setMemberList(\n            activeMemberList.map(member =>\n                member.id === id ? { ...member, once: !member.once} : member\n            )\n        )\n    }, [activeMemberList])\n\n    const onSelect = useCallback(async() => {\n        const unSelectedMemberList = activeMemberList.filter((member) => member.once === false)\n\n        if (unSelectedMemberList.length) {\n\n            setVisible(true)\n            await timeout(1000)\n            setVisible(false)\n\n            const selectedIndex = Math.floor(Math.random() * unSelectedMemberList.length)\n            const selectedId = unSelectedMemberList[selectedIndex].id\n    \n            setSelectedMember(unSelectedMemberList[selectedIndex])\n            setMemberList(\n                memberList.map(member =>\n                    member.id === selectedId ? { ...member, once: true} : member\n                )\n            )\n        }\n\n\n    }, [activeMemberList])\n\n\n    const onReset = useCallback(() => {\n        setMemberList(memberList.map(member => {\n            return {...member, once: false}\n        }))\n    },\n        [activeMemberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    랜덤 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onSelect()} disabled={visible || unSelectedMemberList.length === 0}>한명씩 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>안 뽑힌 사람 중 한명씩 뽑습니다!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! <br/> 뽑힌 이력을 지우려면 초기화 버튼을 누르거나 뽑힌 참가자 명단에서 이름을 클릭하세요.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n\n                <Segment raised textAlign=\"center\" style={{display: 'table', width: '100%', height:'150px', padding: '0'}} stacked inverted={visible}>\n                    {\n                        !visible && selectedMember && <MemberItem member={selectedMember} isBig size='massive' />\n                    }\n\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    아직 안 뽑힌 참가자\n                </Header>\n\n                <Segment stacked>\n                    {\n                        unSelectedMemberList.map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    뽑힌 참가자\n                </Header>\n\n\n                <Segment stacked>\n                    {\n                        selectedMemberList.map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariComponent from '../components/sadari'\nimport OnceComponet from '../components/once'\nimport MemberManager from '../components/memberManager'\n\nconst Once = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OnceComponet />\n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n             */}\n\n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Once;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst OrderItem = ({ member, order }) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n    return (\n        <List.Item>\n                        <List.Content floated=\"right\">\n                        <Header as='h1' color={color(id, active)}>\n                    {order} 등\n                </Header>\n            </List.Content>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            {/* <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content> */}\n\n            <List.Content verticalAlign='middle' floated=\"left\">\n                <Header as='h1' color={color(id, active)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default OrderItem","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\nimport OrderItem from './OrderItem'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [shuffledData, setShuffledData] = useState([]);\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            setShuffledData([])\n            setVisible(true)\n            await timeout(2000)\n            setVisible(false)\n            setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setShuffledData([])\n    },\n        [memberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    순서 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onShuffle()} disabled={visible}>순서대로 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! 뽑은 결과를 없애려면 초기화 버튼을 누르면 됩니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {/* <List\n                        // celled\n                        divided\n                        // selection\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    > */}\n                        {\n                            shuffledData.map((member, id) => \n                            <OrderItem\n                                member={member}\n                                key={id}\n                                order={id+1}\n                                />\n                            )\n                        }\n                        {/* {\n                            shuffledData &&\n                            shuffledData.filter((member) => member.active === true).map((member, id) => (\n                                <OrderItem\n                                    user={member}\n                                    key={id}\n                                    order={id+1}\n                                />\n                            )\n                            )\n                        } */}\n                    {/* </List> */}\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport OrderComponent from '../components/order'\nimport MemberManager from '../components/memberManager'\n\nconst Order = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OrderComponent />\n            \n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Order;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Setting = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Setting;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst TeamItem = ({ team, id }) => {\n\n\n\n\n    return (\n        <>\n                        <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n                </Segment>\n        </>\n\n    )\n}\n\nexport default TeamItem","import React, { useCallback, useState, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport TeamItem from './TeamItem'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [teamData, setTeamData] = useState([]);\n    const [options, setOptions] = useState([])\n    const [currentValue, setCurrentValue] = useState(2)\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            // setShuffledData([])\n            // setVisible(true)\n            // await timeout(2000)\n            // setVisible(false)\n            // setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setTeamData([])\n    },\n        [memberList],\n    )\n\n    const onChangeOptions = useCallback(() => {\n\n        if(activeMemberList.length > 0) {\n            const length = activeMemberList.length >= 8 ? 8 : activeMemberList.length\n            const newOptions = [...Array(length-1)].map((option, id) => {\n                return {key: id + 2, text: id + 2, value: id + 2}\n            })\n            setOptions(newOptions)\n\n        }\n\n    }, [memberList, currentValue])\n\n    const onSetTeam = useCallback(async() => {\n        \n        const newMemberList = activeMemberList\n        \n        shuffle(newMemberList)\n\n        const result = Array(currentValue)\n\n        const unit = newMemberList.length / currentValue\n\n        for (let i = 0; i < currentValue; i++) {\n            result[i] = newMemberList.slice(unit*i, unit*(i+1))\n        }\n        setTeamData([])\n        setVisible(true)\n        await timeout(2000)\n        setVisible(false)\n\n        setTeamData(result)\n\n    },\n        [memberList, currentValue],\n    )\n\n    useEffect(() => {\n        onChangeOptions()\n      }, [memberList])\n\n    return (\n\n        <>\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    팀 나누기\n            </Header>\n\n\n            <Dropdown   \n                    onChange={(e, {value}) => setCurrentValue(value)}\n                    options={options}\n                    selection\n                    value={currentValue}\n                    // placeholder='팀 숫자를 골라주세요'\n                    // style={{width:'100px'}}\n                    compact\n                    />팀으로\n                    \n\n\n                    <Button negative onClick={() => onReset()} floated='right' disabled={visible}>초기화</Button>\n                    <Button positive onClick={() => onSetTeam()} \n                        disabled={activeMemberList.length < 2 || visible}\n                        floated='right'\n                        // style={{width:'50%'}}\n                        >나누기</Button>\n                    \n\n\n\n\n                    <Divider />\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>되도록 같은 숫자로 맞추어서 뽑지만 팀 수에 따라 다소 차이가 생길 수 있습니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {\n                        teamData &&\n                        teamData.map((team, id) => (\n                            <TeamItem\n                                team={team}\n                                id={id}\n                                visible={!visible}\n                            />\n\n                        ))\n                        \n                    }\n\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\nimport MemberManager from '../components/memberManager'\n\nimport TeamComponent from '../components/team'\n\nconst Team = () => {\n\n    return (\n        <>\n            <MemberManager>\n            <TeamComponent />\n\n            </MemberManager>\n\n                \n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message> */}\n            \n\n        </>\n    )\n}\n\n\nexport default Team;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Table\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst SeatList = ({ cols, size }) => {\n\n\n\n\n\n    return (\n        <>\n        <Table.Row textAlign='center'>\n            {\n                cols.map((col, id) =><Table.Cell style={{padding:'0'}} ><MemberItem member={col} key={id} size={size} /></Table.Cell> )\n            }\n        </Table.Row>\n\n\n\n\n\n\n                        {/* <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n                </Segment> */}\n        </>\n\n    )\n}\n\nexport default SeatList","import { createMedia } from \"@artsy/fresnel\"\n\nconst { MediaContextProvider, Media } = createMedia({\n  // breakpoints values can be either strings or integers\n  breakpoints: {\n    sm: 0,\n    lg: 1024,\n  },\n})\n\nexport { MediaContextProvider }\nexport default Media","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Table\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\nimport SeatCols from './SeatCols'\nimport Media from '../../contexts/Media'\n\n\nconst SeatList = ({ rows }) => {\n\n    const size = () => {\n        if (rows[0].length < 3 ) {\n            return 'big'\n        } else if (rows[0].length < 6) {\n            return 'medium'\n        } else {\n            return null\n        }\n    }\n\n\n\n    return (\n        <>\n\n\n\n\n\n<Header textAlign='center' as='h1' block style={{margin: '0.2em'}}>\n                앞\n            </Header>\n\n\n            <Media at=\"sm\">\n        <Table basic='very' textAlign='center' unstackable>\n\n        <Table.Body>\n            {\n                rows.map((row, id) => <SeatCols cols={row} size={size()} key={id} />)\n            }\n            </Table.Body>\n            </Table>\n    </Media>\n\n    <Media greaterThanOrEqual=\"lg\">\n    <Table basic='very' textAlign='center' unstackable>\n    <Table.Body>\n            {\n                rows.map((row, id) => <SeatCols cols={row} size='massive' key={id} />)\n            }\n            </Table.Body>\n\n\n        </Table>\n\n        </Media>\n\n\n\n\n\n                        {/* <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n\n\n                </Segment> */}\n        </>\n\n    )\n}\n\nexport default SeatList","import React, { useCallback, useState, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\n// import TeamItem from './TeamItem'\nimport SeatList from './SeatList'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [rows, setRows] = useState([]);\n    const [options, setOptions] = useState([...Array(10)].map((option, id) => ({key: id + 1, text: id + 1, value: id + 1})))\n    const [currentValue, setCurrentValue] = useState(3)\n    const [visible, setVisible] = useState(false)\n\n\n    const onReset = useCallback(() => {\n        setRows(rows)\n    },\n        [memberList],\n    )\n\n\n    const onSetSeat = useCallback(async() => {\n        \n        const newMemberList = activeMemberList\n        \n        shuffle(newMemberList)\n\n        const total = newMemberList.length\n        const col = currentValue\n        const row = Math.ceil(total / col)\n        const rows = []\n    \n    \n        for(let i = 0; i < row; i++) {\n            rows.push(newMemberList.slice(i * col, (i + 1) * col))\n        }\n\n        setRows([])\n        setVisible(true)\n        await timeout(2000)\n        setVisible(false)\n        setRows(rows)\n\n    },\n        [memberList, currentValue],\n    )\n\n\n    return (\n\n        <>\n\n        <Segment style={{width:'100%', padding:'0.2em'}} inverted={visible} >\n\n        {\n    !visible && <SeatList rows={rows} />\n            }\n\n            \n\n            {\n    visible && <Image size='small' src='/loading.gif' centered />\n            }\n\n        </Segment>\n\n        <Segment style={{width:'100%'}} >\n        <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    자리 배치\n            </Header>\n\n            <Divider />\n\n            <Dropdown   \n                    onChange={(e, {value}) => setCurrentValue(value)}\n                    options={options}\n                    selection\n                    value={currentValue}\n                    placeholder='1열당 사람 수'\n                    // style={{width:'100px'}}\n                    compact\n                    />\n                    개의 열로\n\n\n\n\n\n<Button negative onClick={() => onReset()} floated='right' disabled={visible}>초기화</Button>\n<Button positive onClick={() => onSetSeat()} \n                        disabled={activeMemberList.length < 2 || visible}\n                        floated='right'\n                        // style={{width:'50%'}}\n                        >자리 배치</Button>\n\n<Message info>\n<Message.Header>앞에서부터 자리를 채웁니다</Message.Header>\n        <p>뒷자리는 다 안 채워질 수 있습니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n\n\n\n        </Segment>\n\n\n\n\n\n\n\n\n\n\n\n{/* <List\n                divided\n                relaxed\n            >\n\n                    {\n                        teamData &&\n                        teamData.map((team, id) => (\n                            <TeamItem\n                                team={team}\n                                id={id}\n                                visible={!visible}\n                            />\n\n                        ))\n                        \n                    }\n\n                   </List> */}\n\n                   \n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\nimport MemberManager from '../components/memberManager'\n\nimport SeatComponent from '../components/seat'\n\nconst Team = () => {\n\n    return (\n        <>\n            <MemberManager>\n            <SeatComponent />\n\n            </MemberManager>\n\n                \n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message> */}\n            \n\n        </>\n    )\n}\n\n\nexport default Team;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\n\n\nconst UserInsert = ({ onCreate }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            }\n        },\n        [name],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    required\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    content='추가'\n                    // unstackable \n                    fluid\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst UserItem = ({ user, onActivate, onDeActivate, onDelete }) => {\n    const { id, name, status } = user\n\n    const color = (id, status) => {\n        if (status === 0) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n        <List.Item>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content>\n            <List.Content verticalAlign='middle'>\n                <Header as='h1' color={color(id, status)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default UserItem","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport UserInsert from './UserInsert'\nimport UserItem from './UserItem'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nconst UserComponent = () => {\n\n    const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const onCreate = useCallback(\n        (name) => {\n            axios\n                .post('/api/members', { name })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 1 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onDeActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 0 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n    const onDelete = useCallback(\n        (id) => {\n            axios\n                .delete('/api/members/' + id)\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n\n\n\n    return (\n\n        <Grid>\n            <Grid.Column style={{ maxWidth: 1000 }}>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    사다리 참가자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 1).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                    <UserInsert onCreate={onCreate} />\n                </Segment>\n\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    대기자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 0).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                </Segment>\n            </Grid.Column>\n        </Grid>\n\n\n\n    )\n}\n\nexport default UserComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport UserComponent from '../components/user'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n            <SadariMenu>\n\n                <UserComponent />\n\n            \n         \n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst QuestionItem = ({question}) => {\n    const { id, text } = question\n\n    const color = (id, active) => {\n        if (active === false || id ==0 ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n\n        <Label size={'massive'} image color={color(id, true)} key={id} \n        style={{display: 'table-cell', verticalAlign: 'middle', height: '150px'}}\n        >\n        {text}\n        \n    </Label>\n\n\n    )\n}\n\nexport default QuestionItem","const QuestionList = [\n    {\n        \"id\": 1,\n        \"text\": \"제일 좋아하는 음식은?\"\n      },\n      {\n        \"id\": 2,\n        \"text\": \"가장 좋아하는 노래는?\"\n      },\n      {\n        \"id\": 3,\n        \"text\": \"내 좌우명은?\"\n      },\n      {\n        \"id\": 4,\n        \"text\": \"집에서 가장 멀리 떨어져본 곳은 어디이고 왜 갔는지?\"\n      },\n      {\n        \"id\": 5,\n        \"text\": \"취하면 하게되는 나만의 버릇\"\n      },\n      {\n        \"id\": 6,\n        \"text\": \"스마트폰 액정 깨트리기 vs 에어팟 한쪽 잊어버리기\"\n      },\n      {\n        \"id\": 7,\n        \"text\": \"머리부터 발끝까지 [????] 다음에 나올 가사\"\n      },\n      {\n        \"id\": 8,\n        \"text\": \"잠 안자도 멀쩡한 능력 VS 많이 먹어도 살 안찌는 능력 \"\n      },\n      {\n        \"id\": 9,\n        \"text\": \"감자튀김에 간장 찍어먹기 VS 회에 케챱 찍어먹기\"\n      },\n      {\n        \"id\": 10,\n        \"text\": \"10억이 생긴다면 무엇을 할까?\"\n      },\n      {\n        \"id\": 11,\n        \"text\": \"어렸을 때 했던 가장 특이한 일은?\"\n      },\n      {\n        \"id\": 12,\n        \"text\": \"아무 동물이나 길들일 수 있다면 어떤 동물을?\"\n      },\n      {\n        \"id\": 13,\n        \"text\": \"가장 최근에 읽은 책은? 개발서적 말고.\"\n      },\n      {\n        \"id\": 14,\n        \"text\": \"일주일에 가장 좋아하는 요일과 이유\"\n      },\n      {\n        \"id\": 15,\n        \"text\": \"살아오면서 받았던 조언 중에 최고였던 것\"\n      },\n      {\n        \"id\": 16,\n        \"text\": \"내가 가장 마음에 들었던 혹은 들지 않았던 나의 별명\"\n      },\n      {\n        \"id\": 17,\n        \"text\": \"내 인생을 영화로 만든다면 어떤 배우가 연기했으면 좋을까\"\n      },\n      {\n        \"id\": 18,\n        \"text\": \"대통령이 된다면 가장 먼저 하고싶은 것\"\n      },\n      {\n        \"id\": 19,\n        \"text\": \"내 행운의 숫자는?\"\n      },\n      {\n        \"id\": 20,\n        \"text\": \"어린 시절 가장 좋아했던 장난감?\"\n      },\n      {\n        \"id\": 21,\n        \"text\": \"마법의 수정구슬이 알고싶은 진실을 한가지 알려준다면 무엇을 알고싶은지?\"\n      },\n      {\n        \"id\": 22,\n        \"text\": \"내 인생에서 가장 용기있었던 순간\"\n      },\n      {\n        \"id\": 23,\n        \"text\": \"지금 당장 1억 VS 10년후 20억\"\n      },\n      {\n        \"id\": 24,\n        \"text\": \"비오는날 젖은 양말 VS 비오는날 새 신발\"\n      },\n      {\n        \"id\": 25,\n        \"text\": \"혼자 애슐리 가기 VS 혼자 롯데월드 가기\"\n      },\n      {\n        \"id\": 26,\n        \"text\": \"가장 가지고 싶은 만화 캐릭터의 능력\"\n      },\n      {\n        \"id\": 27,\n        \"text\": \"나만의 비밀 요새를 만든다면 어디에\"\n      },\n      {\n        \"id\": 28,\n        \"text\": \"실현 가능성을 떠나 이걸 발명해보고 싶다\"\n      },\n      {\n        \"id\": 29,\n        \"text\": \"새로운 공휴일을 만들 수 있다면 언제 어느 날로?\"\n      },\n      {\n        \"id\": 30,\n        \"text\": \"택시탈때 어느곳을 보나요?\"\n      },\n      {\n        \"id\": 31,\n        \"text\": \"고향의 특산품을 소개해주세요!\"\n      },\n      {\n        \"id\": 32,\n        \"text\": \"10년 친구 1명 VS 1년 친구 10명\"\n      },\n      {\n        \"id\": 33,\n        \"text\": \"나의 인생 영화\"\n      },\n      {\n        \"id\": 34,\n        \"text\": \"배워보고 싶은 악기는?\"\n      },\n      {\n        \"id\": 35,\n        \"text\": \"10년전에 나에게 10자이내로 말을 전할 수 있다면\"\n      },\n      {\n        \"id\": 36,\n        \"text\": \"내 보물 1호에 대해서\"\n      },\n      {\n        \"id\": 37,\n        \"text\": \"내가 좋아하는 운동 하는거 보는거 상관없음\"\n      },\n      {\n        \"id\": 38,\n        \"text\": \"내가 가장 열정적이었던 순간\"\n      },\n      {\n        \"id\": 39,\n        \"text\": \"나의 인생게임에 대해서\"\n      },\n      {\n        \"id\": 40,\n        \"text\": \"온라인에서 만난 사람을 실제로 본적이 있다? 없다?\"\n      },\n      {\n        \"id\": 41,\n        \"text\": \"스타벅스와 이디야의 카페라떼 맛을 구분할 수 있다\"\n      },\n      {\n        \"id\": 42,\n        \"text\": \"엘레베이터를 탔을 때 선호하는 위치\"\n      },\n      {\n        \"id\": 43,\n        \"text\": \"모르는게 약 VS 아는게 힘\"\n      },\n      {\n        \"id\": 44,\n        \"text\": \"나의 학창시절, 모범생? 날라리?\"\n      },\n      {\n        \"id\": 45,\n        \"text\": \"무인도에 3가지만 가져갈 수 있다면? 통신기기 안됨\"\n      },\n      {\n        \"id\": 46,\n        \"text\": \"살면서 바꾸고 싶었던 이름?\"\n      },\n      {\n        \"id\": 47,\n        \"text\": \"남들이 보기에 대단한 목표는 아니어도 꼭 해보고싶은 도전 과제는\"\n      },\n      {\n        \"id\": 48,\n        \"text\": \"내가 닮고 싶은 사람과 이유는?\"\n      },\n      {\n        \"id\": 49,\n        \"text\": \"좋아하는 사자성어나 명언은?\"\n      },\n      {\n        \"id\": 50,\n        \"text\": \"나만의 색깔과 그 이유\"\n      },\n      {\n        \"id\": 51,\n        \"text\": \"어렸을 때 왜 어른이 되고 싶었는지?\"\n      },\n      {\n        \"id\": 52,\n        \"text\": \"시간 여행을 할 수 있다면 어느때로?\"\n      },\n      {\n        \"id\": 53,\n        \"text\": \"현실의 법칙을 한가지 바꿀 수 있다면 무엇을 바꾸고 싶은지\"\n      },\n      {\n        \"id\": 54,\n        \"text\": \"닭이 먼저냐 계랸이 먼저냐\"\n      },\n      {\n        \"id\": 55,\n        \"text\": \"곰이 공격해올때 떠오르는 대처 방법\"\n      },\n      {\n        \"id\": 56,\n        \"text\": \"로또에 당첨된다면 무엇이 하고싶은지\"\n      },\n      {\n        \"id\": 57,\n        \"text\": \"제일 싫어하는 노래는\"\n      },\n      {\n        \"id\": 58,\n        \"text\": \"나를 긴장하게 만드는 것은 무엇인지\"\n      },\n      {\n        \"id\": 59,\n        \"text\": \"내가 유령의 집을 만든다면 이것을 넣어보고 싶다\"\n      },\n      {\n        \"id\": 60,\n        \"text\": \"최근에 가장 완벽한 날은 언제였고 그 이유는?\"\n      },\n      {\n        \"id\": 61,\n        \"text\": \"내가 이 음식을 먹기 위해서 이것까지 해봤다\"\n      },\n      {\n        \"id\": 62,\n        \"text\": \"심각한 교통문제를 가진 도시 vs 벌레 가득 시골\"\n      },\n      {\n        \"id\": 63,\n        \"text\": \"인생에서 가장 어려웠던 시기\"\n      },\n      {\n        \"id\": 64,\n        \"text\": \"철없는 어린 시절 이것까지 해봤다\"\n      },\n      {\n        \"id\": 65,\n        \"text\": \"기억에 남는 광고\"\n      },\n      {\n        \"id\": 66,\n        \"text\": \"똑똑한 로봇 하인이 생긴다면 제일 먼저 이 일을 시키자\"\n      },\n      {\n        \"id\": 67,\n        \"text\": \"땅에 떨어진 음식을 주어 먹은적이 있습니까\"\n      },\n      {\n        \"id\": 68,\n        \"text\": \"평범하진 않은 친구 혹은 지인이 있습니까\"\n      },\n      {\n        \"id\": 69,\n        \"text\": \"나를 위해 목숨을 걸어줄 친구가 있습니까\"\n      },\n      {\n        \"id\": 70,\n        \"text\": \"내가 좋아하는 사람과 연애하기 vs 나를 좋아해주는 사람과 연애하기\"\n      },\n      {\n        \"id\": 71,\n        \"text\": \"재미있는 비행기 1시간 vs 재미없는 비행기 10시간\"\n      },\n      {\n        \"id\": 72,\n        \"text\": \"자도 자도 피곤 vs 먹어도 먹어도 배고픔\"\n      },\n      {\n        \"id\": 73,\n        \"text\": \"싫은데 재밌는 사람 vs 착한데 재미없는 사람\"\n      },\n      {\n        \"id\": 74,\n        \"text\": \"한 분야의 거장 vs 다양한 분야의 전문가\"\n      },\n      {\n        \"id\": 75,\n        \"text\": \"유튜브 평생 금지 vs 카톡 평생 금지\"\n      },\n      {\n        \"id\": 76,\n        \"text\": \"아침 5시 출근하기 vs 밤 10시까지 야근하기\"\n      },\n      {\n        \"id\": 77,\n        \"text\": \"나의 가슴을 두근거리게 하는 것은 무엇인지\"\n      },\n      {\n        \"id\": 78,\n        \"text\": \"나만의 정원을 가꾼다면 어떤 모습인지\"\n      },\n      {\n        \"id\": 79,\n        \"text\": \"누군가 나에게 누가 손편지를 쓴다면 누구일지\"\n      },\n      {\n        \"id\": 80,\n        \"text\": \"지금 살고있는 곳에 왜 왔고 얼마나 머물 계획인지\"\n      },\n      {\n        \"id\": 81,\n        \"text\": \"힘든 일을 이겨내는 나만의 방법\"\n      },\n      {\n        \"id\": 82,\n        \"text\": \"세상에 태어나서 가장 잘 한 일은 무엇인지\"\n      },\n      {\n        \"id\": 83,\n        \"text\": \"나의 유튜브 구독 제 1순위는?\"\n      },\n      {\n        \"id\": 84,\n        \"text\": \"기억에 가장 남는 스승은 누구인지\"\n      },\n      {\n        \"id\": 85,\n        \"text\": \"하루 중 가장 편한 시간은 언제인지\"\n      },\n      {\n        \"id\": 86,\n        \"text\": \"내가 태어날 때 태몽이 있었는지\"\n      },\n      {\n        \"id\": 87,\n        \"text\": \"살면서 기억에 남았던 꿈\"\n      },\n      {\n        \"id\": 88,\n        \"text\": \"올해 이 목표만은 꼭 이루고 싶다\"\n      },\n      {\n        \"id\": 89,\n        \"text\": \"나에게 있어 쇼핑이란?\"\n      },\n      {\n        \"id\": 90,\n        \"text\": \"1년 뒤 시한부 인생이 된다면 무엇을 할 것인지\"\n      },\n      {\n        \"id\": 91,\n        \"text\": \"나를 가장 화나게 하는 것\"\n      },\n      {\n        \"id\": 92,\n        \"text\": \"나의 소유물 중 나를 가장 짜증나게 하는 것\"\n      },\n      {\n        \"id\": 93,\n        \"text\": \"최근에 누구를 웃게 만들었는지\"\n      },\n      {\n        \"id\": 94,\n        \"text\": \"내가 놓아 줘야 할 것인데 못 놓고 있는 것\"\n      },\n      {\n        \"id\": 95,\n        \"text\": \"갓 태어난 아이에게 한마디 해줄 수 있다면\"\n      },\n      {\n        \"id\": 96,\n        \"text\": \"내가 잊지 못하는 누군가의 친절\"\n      },\n      {\n        \"id\": 97,\n        \"text\": \"사랑하는 사람을 위해 법을 어겨도 되는지\"\n      },\n      {\n        \"id\": 98,\n        \"text\": \"최근에 했던 가장 새로운 경험\"\n      },\n      {\n        \"id\": 99,\n        \"text\": \"나에게 실패란 무엇인지\"\n      },\n      {\n        \"id\": 100,\n        \"text\": \"평생 밀가루 금지 vs 평생 치킨 금지\"\n      },\n      {\n        \"id\": 101,\n        \"text\": \"돈은 많이주는데 진짜 하기 싫은 일 vs 적게 주는데 좋아하는 일\"\n      },\n      {\n        \"id\": 102,\n        \"text\": \"무언가를 사고 나서 가장 후회했던 적이 있는지\"\n      },\n      {\n        \"id\": 103,\n        \"text\": \"나빼고 다 천재인 조에서 자괴감 느끼기 vs 내가 희망인 팀에서 소처럼 일하기\"\n      },\n      {\n        \"id\": 104,\n        \"text\": \"수프에 밥말아먹기 vs 떡볶이에 밥말아먹기\"\n      },\n      {\n        \"id\": 105,\n        \"text\": \"에어컨 없는 세상 vs 보일러 없는 세상\"\n      },\n      {\n        \"id\": 106,\n        \"text\": \"인생에서 가장 빠르게 달려본 경험\"\n      },\n      {\n        \"id\": 107,\n        \"text\": \"만원 지하철 낑겨서 1시간 vs 시외버스 앉아서 2시간\"\n      },\n      {\n        \"id\": 108,\n        \"text\": \"10살 연상 후임 vs 10살 연하 상사\"\n      },\n      {\n        \"id\": 109,\n        \"text\": \"월요일 연차 vs 금요일 연차\"\n      },\n      {\n        \"id\": 110,\n        \"text\": \"내가 가장 고집을 부렸던 순간\"\n      },\n      {\n        \"id\": 111,\n        \"text\": \"왜 지금 하고 있는 일을 하게 되었는지\"\n      },\n      {\n        \"id\": 112,\n        \"text\": \"친구한테 소고기 사주기 vs 기부하기\"\n      },\n      {\n        \"id\": 113,\n        \"text\": \"여름에 겨울 옷 입기 vs 겨울에 여름 옷 입기\"\n      },\n      {\n        \"id\": 114,\n        \"text\": \"김 빠진 콜라 vs 녹은 아이스크림\"\n      },\n      {\n        \"id\": 115,\n        \"text\": \"감자튀김에 간장 찍어먹기 vs 회에 케챱 찍어먹기\"\n      },\n      {\n        \"id\": 116,\n        \"text\": \"나의 인생 만화는 무엇인지\"\n      },\n      {\n        \"id\": 117,\n        \"text\": \"살면서 가장 아차 싶었던 순간\"\n      },\n      {\n        \"id\": 118,\n        \"text\": \"살면서 외국인과 가장 오래 얘기했던 경험\"\n      },\n      {\n        \"id\": 119,\n        \"text\": \"살면서 놓쳤던 가장 큰 대박 기회\"\n      },\n      {\n        \"id\": 120,\n        \"text\": \"현재 직장에 어떻게 오게 되었는지\"\n      },\n      {\n        \"id\": 121,\n        \"text\": \"무언가를 가장 오랜 시간동안 기다려본 경험\"\n      },\n      {\n        \"id\": 122,\n        \"text\": \"자주 다시 찾아보게되는 사진, 영상, 비디오가 무엇인지\"\n      },\n      {\n        \"id\": 123,\n        \"text\": \"종교는 무엇이고 어떻게 가지게 되었는지\"\n      },\n      {\n        \"id\": 124,\n        \"text\": \"살면서 받은 선물 중 가장 기뻤던 것\"\n      },\n      {\n        \"id\": 125,\n        \"text\": \"행복한 연애, 결혼생활을 위해 가장 필요하다고 생각되는 것\"\n      },\n      {\n        \"id\": 126,\n        \"text\": \"내가 만들어 보고 싶은 앱 혹은 서비스가 있다면\"\n      },\n]\n\n\nexport default QuestionList","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\nimport QuestionItem from './QuestionItem'\nimport QuestionList from './QuestionList'\n\nconst OrderComponent = () => {\n\n    const defaultQuestion = {\n        id : 0,\n        text : '여기에 질문이 나타납니다',\n    }\n\n    const endQuestion = {\n        id : 0,\n        text : '질문이 모두 끝났습니다! 다시 시작하려면 초기화를 눌러주세요',\n    }\n\n    const { memberList, setMemberList } = useMemberList()\n\n    // const [currentIndex, setcurrentIndex] = useState(0)\n    const [question, setQuestion] = useState(defaultQuestion)\n    const [currentQuestionList, setCurrentQuestionList] = useState(QuestionList)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const [visible, setVisible] = useState(false)\n\n\n    const onSelect = useCallback(async() => {\n\n\n            console.log(currentQuestionList)\n            setVisible(true)\n            await timeout(1500)\n\n            if (currentQuestionList.length == 0) {\n                setQuestion(endQuestion)\n            } else {\n                const currentIndex = Math.floor(Math.random() * currentQuestionList.length)\n                setQuestion(currentQuestionList[currentIndex])\n                setCurrentQuestionList(currentQuestionList.filter((value, index) => index !== currentIndex ))\n            }\n\n            setVisible(false)\n\n    }, [question, currentQuestionList])\n\n\n    const onReset = useCallback(() => {\n        setQuestion(defaultQuestion)\n        setCurrentQuestionList(QuestionList)\n    },\n        [question, currentQuestionList],\n    )\n\n    return (\n\n        <>\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    그냥 질문지\n            </Header>\n\n                    <Button positive onClick={() => onSelect()} disabled={visible}>질문지 뽑기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>아이스브레이킹, 자기소개를 위한 질문지 뽑기!</Message.Header>\n        <p>질문지 뽑기 버튼을 눌러서 다양한 질문들을 뽑아보세요!</p>\n      </Message>\n\n                </Grid.Column>\n                <Grid.Column>\n                    <br></br>\n\n                <Segment raised textAlign=\"center\" style={{display: 'table', width: '100%', height:'150px', padding: '0'}} stacked inverted={visible}>\n                    {\n                        !visible && <QuestionItem question={question}/>\n                    }\n\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariComponent from '../components/sadari'\nimport QuestionComponet from '../components/question'\nimport MemberManager from '../components/memberManager'\n\nconst Once = () => {\n\n    return (\n        <>\n\n                <QuestionComponet />\n\n        </>\n    )\n}\n\n\nexport default Once;","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport { createMedia } from \"@artsy/fresnel\"\n\n\n\nimport MobileMenu from './components/sadariMenu/MobileMenu'\nimport MemberManager from './components/memberManager'\n\nimport SadariComponent from './components/sadari'\n\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport Seat from './pages/Seat'\nimport User from './pages/User'\nimport Question from './pages/Question'\nimport { MemberListProvider } from './contexts/memberList'\n\n\nconst App = () => {\n  return (\n    <MobileMenu>\n\n\n    <Switch>\n      <Route exact path=\"/\">\n      <MainSadari />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n      <Route exact path=\"/seat\">\n        <Seat />\n      </Route>\n      <Route exact path=\"/question\">\n        <Question />\n      </Route>\n    </Switch>\n\n\n    </MobileMenu>\n\n  )\n}\n\nexport default App;\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message,\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\nimport MemberListButton from './MemberListButton'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible)\n      setVisible(false)\n  }\n\n  // const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setTimeout(() => {\n        setExit(true)\n      }, 500)\n    });\n}, []);\n\n// const history = useHistory()\n\n// const goBack = () => {\n//   history.goBack()\n// }\n\n\n\n//   if(exit) {\n//     return <Redirect to=\"/\" />\n//   }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n        >\n\n          {/* <Menu.Item>\n            <Menu.Header >\n              {userData && userData.name}\n          </Menu.Header>\n          </Menu.Item> */}\n\n          {/* <Menu.Item\n            as={Link}\n            to='/info'\n            \n          >\n            <Icon name='info circle' size=\"large\"/>\n            정보\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/member'\n          >\n            <Icon name='users' size=\"large\" />\n            참가자 관리\n          </Menu.Item> */}\n\n          <Menu.Item\n            as={Link}\n            to='/sadari'\n          >\n            <Icon name='road' size=\"large\" />\n            사다리 타기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            랜덤 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/setting'\n          >\n            <Icon name='setting' size=\"large\" />\n            설정\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          {/* <Menu fixed='top' inverted borderless> */}\n          <Menu \n            inverted\n            style={{ margin: '10px' }}\n            borderless\n            size='small'\n            >\n\n            {/* <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item> */}\n\n<Menu.Item\n            as={Link}\n            to='/'\n          >\n              <Image size='tiny' src='logo.png'></Image>\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/'\n          >\n              사다리타기\n            </Menu.Item>\n\n\n\n            <Menu.Item\n            as={Link}\n            to='/order'\n          >\n              순서뽑기\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/once'\n          >\n              랜덤뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/team'\n          >\n              팀나누기\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/seat'\n          >\n              자리배치\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/question'\n          >\n              그냥질문지\n            </Menu.Item>\n\n            <Menu.Item\n            as={Link}\n            to='/info'\n          >\n              이건뭔가요?\n            </Menu.Item>\n\n\n\n\n            <Menu.Menu position='right'>\n              <Menu.Item>\n\n                  <Button primary fluid disabled>\n                    로그인\n                  </Button>\n\n                  {/* <Button negative>\n                    로그아웃\n                  </Button> */}\n    \n              </Menu.Item>\n\n\n            </Menu.Menu> \n\n          </Menu>\n          \n          {/* <Segment\n            style={{ margin: '10px'}}\n            secondary\n          \n          >\n\n            <Button icon positive>\n              <Icon name='plus' />\n              </Button>\n            \n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            \n          </Segment> */}\n\n\n\n          <Container style={{ marginTop: '2em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n{/* \n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal> */}\n    </>\n  )\n}\n\nexport default SadariMenu;\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport { createMedia } from \"@artsy/fresnel\"\n\n\n\nimport MemberManager from './components/memberManager'\n\nimport SadariComponent from './components/sadari'\nimport DesktopMenu from './components/sadariMenu/DesktopMenu'\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport Seat from './pages/Seat'\nimport User from './pages/User'\nimport Question from './pages/Question'\nimport { MemberListProvider } from './contexts/memberList'\n\n\nconst App = () => {\n  return (\n    <DesktopMenu>\n\n\n    <Switch>\n      <Route exact path=\"/\">\n      <MainSadari />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n      <Route exact path=\"/seat\">\n        <Seat />\n      </Route>\n      <Route exact path=\"/question\">\n        <Question />\n      </Route>\n    </Switch>\n\n\n    </DesktopMenu>\n\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\nimport { createMedia } from \"@artsy/fresnel\"\n\nimport MobileApp from './MobileApp'\nimport DesktopApp from './DesktopApp'\nimport { MemberListProvider } from './contexts/memberList'\nimport Media, { MediaContextProvider } from './contexts/Media'\n\n\nconst App = () => {\n  return (\n    <MemberListProvider>\n    <MediaContextProvider>\n    <Media at=\"sm\">\n      <MobileApp />\n    </Media>\n    <Media greaterThanOrEqual=\"lg\">\n      <DesktopApp />\n    </Media>\n  </MediaContextProvider>\n  </MemberListProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}