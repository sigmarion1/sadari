{"version":3,"sources":["utils/useInput.js","utils/useQuery.js","utils/fetcher.js","utils/ColorTable.js","components/sadariMenu/index.js","components/memberManager/MemberItem.js","components/memberManager/MemberInsert.js","contexts/memberList.js","components/memberManager/index.js","components/sadari/SadariTD.js","utils/Random.js","utils/Timeout.js","components/sadari/EditableText.js","components/sadari/index.js","pages/Home.js","pages/Info.js","pages/MainSadari.js","components/once/index.js","pages/Once.js","components/order/OrderItem.js","components/order/index.js","pages/Order.js","pages/Setting.js","components/team/TeamItem.js","components/team/index.js","pages/Team.js","components/user/UserInsert.js","components/user/UserItem.js","components/user/index.js","pages/User.js","App.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","useCallback","e","target","useQuery","URLSearchParams","useLocation","search","fetcher","url","axios","get","withCredentials","then","response","data","ColorTable","ColorTableRaw","getColorById","id","length","SadariMenu","props","visible","setVisible","useSWR","name","password","setLoginError","setExit","preventDefault","trim","post","mutate","catch","err","setTimeout","Sidebar","Pushable","as","Menu","animation","icon","inverted","vertical","size","borderless","width","Item","Link","to","Icon","Pusher","dimmed","onClick","style","minHeight","margin","Image","src","position","Button","primary","fluid","disabled","Container","marginTop","children","MemberItem","member","isBig","active","Label","image","color","display","verticalAlign","height","UserInsert","onCreate","onChangeName","setName","onSubmit","Form","Group","unstackable","Input","placeholder","onChange","required","content","MemberListContext","createContext","MemberListProvider","once","memberList","setMemberList","Provider","useMemberList","useContext","MemberManager","onDelete","filter","onToggle","map","concat","Grid","columns","stackable","relaxed","Row","React","cloneElement","Divider","Column","Segment","secondary","Header","textAlign","MemberInsert","negative","Message","info","SadariTD","vColor","hColor","hstyle","borderBottom","visibility","vstyle","borderLeft","left","padding","getRandomInt","min","max","Math","ceil","floor","random","timeout","delay","Promise","res","EditableInput","inputRef","useRef","inputVisible","setInputVisible","text","setText","onClickOutSide","current","contains","useEffect","document","addEventListener","removeEventListener","Fragment","ref","faker","locale","MainSadari","members","horizontalCount","connCount","timeouts","lState","setLState","rState","setRState","cover","setCover","isPlaying","setIsPlaying","isOne","setIsOne","resetHandler","a","arr","i","verticalArr","j","node","v","push","verticalCount","hIndex","vIndex","h","Array","fill","runHandler","order","startId","endId","newRState","slice","newLState","stopHandler","clearTimeout","borderWidth","borderColor","textAlignLast","borderSpacing","tableLayout","index","zIndex","top","centered","horizontal","_","positive","floated","warning","Info","OrderComponent","activeMemberList","selectedMember","setSelectedMember","onSelect","unSelectedMemberList","selectedIndex","selectedId","onReset","raised","stacked","Once","OrderItem","List","Content","avatar","shuffle","array","randomIndex","currentIndex","shuffledData","setShuffledData","onShuffle","newMemberList","divided","Order","Setting","TeamItem","team","teamData","setTeamData","options","setOptions","currentValue","setCurrentValue","onChangeOptions","newOptions","option","key","onSetTeam","result","unit","Dropdown","selection","Team","UserItem","user","onActivate","onDeActivate","status","UserComponent","membersData","patch","delete","maxWidth","App","exact","path","User","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d1f76215.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const handler = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport default useQuery;","import axios from 'axios';\n\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((response) => response.data);\n\nexport default fetcher;","const ColorTable = [\n    'white',\n    'grey',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n]\n\nconst ColorTableRaw = [\n    '#FFFFFF',\n    '#e8e8e8',\n    '#db2828',\n    '#f2711c',\n    '#fbbd08',\n    '#b5cc18',\n    '#21ba45',\n    '#00b5ad',\n    '#2185d0',\n    '#6435c9',\n    '#a333c8',\n    '#e03997',\n    '#a5673f',\n]\n\nconst getColorById = (id) => {\n    return ColorTable[(id % (ColorTable.length - 2)) + 2]\n}\n\nconst getColorRowById = (id) => {\n    return ColorTableRaw[(id % (ColorTable.length - 2)) + 2]\n}\n\nexport default ColorTable\nexport { ColorTableRaw, getColorById, getColorRowById }\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Modal,\n  Form,\n  Message,\n} from 'semantic-ui-react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport useInput from '../../utils/useInput'\nimport useQuery from '../../utils/useQuery'\nimport fetcher from '../../utils/fetcher'\nimport axios from 'axios'\nimport useSWR, { mutate } from 'swr'\n\nimport MemberListButton from './MemberListButton'\n\n\nconst SadariMenu = (props) => {\n  const [visible, setVisible] = useState(false)\n  const toggleVisible = () => setVisible(!visible)\n  const handlePusher = () => {\n    if (visible)\n      setVisible(false)\n  }\n\n  const { data: userData } = useSWR('/api/auth', fetcher)\n\n  const [name, onChangeName] = useInput(useQuery().get(\"name\") || '')\n  const [password, onChangePassword] = useInput('')\n  const [loginError, setLoginError ] = useState(false)\n\n  const [exit, setExit] = useState(false)\n\n  const onLogin = useCallback(\n    (e) => {\n        e.preventDefault()\n\n        if (!name || !name.trim()) {\n            return\n        }\n\n        setLoginError(false)\n        axios\n            .post('/api/auth/login', { name, password })\n            .then(() => {\n              mutate('/api/auth')\n            })\n            .catch((err) => {\n                setLoginError(true)\n            })\n\n    }, [name, password]\n)\n\nconst onLogout = useCallback(() => {\n  axios\n    .post('/api/auth/logout', null, {\n      withCredentials: true,\n    })\n    .then(() => {\n      mutate('/api/auth')\n      setTimeout(() => {\n        setExit(true)\n      }, 500)\n    });\n}, []);\n\n// const history = useHistory()\n\n// const goBack = () => {\n//   history.goBack()\n// }\n\n\n\n//   if(exit) {\n//     return <Redirect to=\"/\" />\n//   }\n\n  return (\n    <>\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon='labeled'\n          inverted\n          vertical\n          visible={visible}\n          size=\"massive\"\n          borderless\n          // compact\n          width='thin'\n        >\n\n          {/* <Menu.Item>\n            <Menu.Header >\n              {userData && userData.name}\n          </Menu.Header>\n          </Menu.Item> */}\n\n          <Menu.Item\n            as={Link}\n            to='/info'\n            \n          >\n            <Icon name='info circle' size=\"large\"/>\n            정보\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/member'\n          >\n            <Icon name='users' size=\"large\" />\n            참가자 관리\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/sadari'\n          >\n            <Icon name='road' size=\"large\" />\n            그냥 사다리\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/once'\n          >\n            <Icon name='clipboard check' size=\"large\" />\n            한 번씩 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/order'\n          >\n            <Icon name='ordered list' size=\"large\" />\n            순서 뽑기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/team'\n          >\n            <Icon name='object group' size=\"large\" />\n            팀 나누기\n          </Menu.Item>\n\n          <Menu.Item\n            as={Link}\n            to='/setting'\n          >\n            <Icon name='setting' size=\"large\" />\n            설정\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={visible}\n          onClick={handlePusher}\n          style={{ minHeight: \"100vh\" }}\n        >\n\n          {/* <Menu fixed='top' inverted borderless> */}\n          <Menu \n            inverted\n            style={{ margin: '10px' }}\n            borderless\n            >\n\n            {/* <Menu.Item\n              onClick={toggleVisible}\n            >\n              <Icon\n                name='sidebar'\n                size=\"big\"\n                style={{ margin: '0' }}\n              />\n            </Menu.Item> */}\n\n<Menu.Item\n            as={Link}\n            to='/'\n          >\n              <Image size='tiny' src='logo.png'></Image>\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/order'\n          >\n              순서뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/once'\n          >\n              랜덤뽑기\n            </Menu.Item>\n            <Menu.Item\n            as={Link}\n            to='/team'\n          >\n              팀나누기\n            </Menu.Item>\n\n            {/* <Menu.Item\n            as={Link}\n            to='/info'\n          >\n              이건뭔가요?\n            </Menu.Item> */}\n\n\n            <Menu.Menu position='right'>\n              <Menu.Item>\n\n                  <Button primary fluid disabled>\n                    로그인\n                  </Button>\n\n                  {/* <Button negative>\n                    로그아웃\n                  </Button> */}\n    \n              </Menu.Item>\n\n\n            </Menu.Menu> \n\n          </Menu>\n          \n          {/* <Segment\n            style={{ margin: '10px'}}\n            secondary\n          \n          >\n\n            <Button icon positive>\n              <Icon name='plus' />\n              </Button>\n            \n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            <MemberListButton />\n            \n          </Segment> */}\n\n\n\n          <Container style={{ marginTop: '2em' }}>\n            {props.children}\n          </Container>\n\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n\n{/* \n      <Modal\n                basic\n                // onClose={() => setOpen(false)}\n                // onOpen={() => setOpen(true)}\n                open={!userData}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n\n                <Header icon>\n                    <Icon name='road' />\n                    비공개 사다리 입니다     </Header>\n                <Modal.Content>\n                    <Form onSubmit={onLogin} size='large'>\n\n                        <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n                        <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            type='password'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n\n                        />\n\n  \n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button basic color='red' inverted onClick={goBack}>\n                                    <Icon name='remove' /> 뒤로\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='sign-in' /> 입장\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {loginError &&\n                        <Message negative>\n                            <Message.Header>\n                                입장 실패\n            </Message.Header>\n                            <p>\n                              사다리 이름과 입장 코드를 확인해주세요.\n            </p>\n                        </Message>\n                    }\n\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal> */}\n    </>\n  )\n}\n\nexport default SadariMenu;\n","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst MemberItem = ({member, onClick, isBig}) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n\n        <Label size={isBig ? 'massive':'small'} image color={color(id, active)} key={id} as='a' \n        onClick={onClick ? () => onClick(id) : {}}\n        style={isBig ? {display: 'table-cell', verticalAlign: 'middle', height: '150px'} : {margin: '0.2em'}}\n        >\n        <img src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n        {name}\n        \n    </Label>\n\n\n    )\n}\n\nexport default MemberItem","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\n\n\nconst UserInsert = ({ onCreate }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            }\n        },\n        [name],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    required\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    content='추가'\n                    // unstackable \n                    fluid\n                    primary\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { createContext ,useContext,useState } from 'react'\n\nconst MemberListContext = createContext(null)\n\nconst MemberListProvider = ({ children }) => {\n    const [memberList, setMemberList] = useState([\n        {\n            id: 1,\n            name: '철수',\n            active: true,\n            once: false, \n        },\n        {\n            id: 2,\n            name: '영희',\n            active: true,\n            once: false, \n        },\n        {\n            id: 3,\n            name: '민수',\n            active: false,\n            once: false, \n        },\n        {\n            id: 4,\n            name: '수연',\n            active: true,\n            once: false, \n        },\n    ])\n    \n    return (\n        <MemberListContext.Provider value={{ memberList, setMemberList}}>\n            {children}\n        </MemberListContext.Provider>\n    )\n}\n\nconst useMemberList = () => useContext(MemberListContext)\n\nexport { MemberListProvider }\n\nexport default useMemberList","import React, { useCallback, useRef, useState, useContext } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    GridRow\n} from 'semantic-ui-react'\n\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport MemberItem from './MemberItem'\nimport MemberInsert from './MemberInsert'\nimport useMemberList from '../../contexts/memberList'\n\n\nconst MemberManager = (props) => {\n\n    const { memberList, setMemberList } = useMemberList()\n\n\n    // const [memberList, setMemberList] = useState([\n    //     {\n    //         id: 1,\n    //         name: '철수',\n    //         active: true,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 2,\n    //         name: '영희',\n    //         active: true,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 3,\n    //         name: '민수',\n    //         active: false,\n    //         once: true, \n    //     },\n    //     {\n    //         id: 4,\n    //         name: '수연',\n    //         active: true,\n    //         once: true, \n    //     },\n    // ])\n\n    // const nextId = useRef(5)\n\n\n\n\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    // const onCreate = useCallback(\n    //     (name) => {\n    //         axios\n    //             .post('/api/members', { name })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n\n    // const onActivate = useCallback(\n    //     (id) => {\n    //         axios\n    //             .patch('/api/members/' + id, { status: 1 })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n\n    // const onDeActivate = useCallback(\n    //     (id) => {\n    //         axios\n    //             .patch('/api/members/' + id, { status: 0 })\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n    // const onDelete = useCallback(\n    //     (id) => {\n    //         axios\n    //             .delete('/api/members/' + id)\n    //             .then(() => mutate())\n    //     }, [membersData]\n    // )\n\n    const onDelete = useCallback(() => {\n        setMemberList(\n            memberList.filter(member => member.active === true)\n        )\n    }, [memberList])\n\n\n    const onToggle = useCallback((id) => {\n        setMemberList(\n            memberList.map(member =>\n                member.id === id ? { ...member, active: !member.active} : member\n            )\n        )\n    }, [memberList])\n\n    const onCreate = useCallback((name) => {\n        const member = {\n            id: memberList[memberList.length - 1].id + 1,\n            name,\n            active: true,\n            once: false,\n        }\n        setMemberList(memberList.concat(member))\n    }, [memberList])\n\n\n    return (\n\n        <Grid columns='equal' stackable relaxed >\n\n    \n        <Grid.Row>\n        {React.cloneElement(props.children)}\n        </Grid.Row>\n\n        <Divider />\n\n\n        <Grid.Row>\n            <Grid.Column>\n                <Segment secondary>\n\n        <Header as='h3' textAlign='center'>\n            참가자 명단 : {memberList.filter((member) => member.active === true).length} 명\n        </Header>\n                <Segment textAlign=\"center\">\n                    {\n                        memberList.filter((member) => member.active === true).map((member) => \n                        <MemberItem \n                            member={member} \n                            onClick={onToggle}\n                        />)\n                    }\n\n                </Segment>\n\n                <MemberInsert onCreate={onCreate} />\n\n                <Divider />\n\n                <Button fluid primary disabled>CSV 업로드</Button>\n\n                    </Segment>\n            </Grid.Column>\n\n            <Grid.Column>\n                <Segment secondary>\n            <Header as='h3' textAlign='center'>\n                대기자 명단 : {memberList.filter((member) => member.active === false).length} 명\n        </Header>\n                <Segment textAlign=\"center\">\n                {\n                        memberList.filter((member) => member.active === false).map((member) => \n                        <MemberItem \n                            member={member}\n                            onClick={onToggle}\n                        />)\n                    }\n\n                </Segment>\n\n                <Button negative fluid onClick={() => onDelete()}>\n                    대기자 모두 삭제\n                    </Button>\n\n                <Message info>\n        <Message.Header>참가자의 상태를 변경하려면?</Message.Header>\n        <p>명단의 이름을 클릭하세요</p>\n      </Message>\n\n                    </Segment>\n\n            </Grid.Column>\n\n\n        </Grid.Row>\n\n\n\n    </Grid>\n\n\n\n\n\n\n\n\n\n\n\n\n        // <Grid>\n        //     <Grid.Column style={{ maxWidth: 1000 }}>\n        //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n        //             사다리 참가자\n        //     </Header>\n        //         <Segment stacked>\n        //             <List\n        //                 // celled\n        //                 divided\n        //                 // selection\n        //                 size=\"massive\"\n        //                 // inverted\n        //                 relaxed\n        //             // verticalAlign=\"middle\"\n        //             >\n        //                 {\n        //                     membersData &&\n        //                     membersData.filter((user) => user.status === 1).map((user) => (\n        //                         <UserItem\n        //                             user={user}\n        //                             key={user.id}\n        //                             onActivate={onActivate}\n        //                             onDeActivate={onDeActivate}\n        //                             onDelete={onDelete}\n        //                         />\n        //                     )\n        //                     )\n        //                 }\n        //             </List>\n        //             <UserInsert onCreate={onCreate} />\n        //         </Segment>\n\n        //         <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n        //             대기자\n        //     </Header>\n        //         <Segment stacked>\n        //             <List\n        //                 // celled\n        //                 divided\n        //                 // selection\n        //                 size=\"massive\"\n        //                 // inverted\n        //                 relaxed\n        //             // verticalAlign=\"middle\"\n        //             >\n        //                 {\n        //                     membersData &&\n        //                     membersData.filter((user) => user.status === 0).map((user) => (\n        //                         <UserItem\n        //                             user={user}\n        //                             key={user.id}\n        //                             onActivate={onActivate}\n        //                             onDeActivate={onDeActivate}\n        //                             onDelete={onDelete}\n        //                         />\n        //                     )\n        //                     )\n        //                 }\n        //             </List>\n        //         </Segment>\n        //     </Grid.Column>\n        // </Grid>\n\n\n\n    )\n}\n\nexport default MemberManager","import React, { useState } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\nimport { ColorTableRaw } from '../../utils/ColorTable'\n\n\nconst SadariTD = ({ vColor, hColor }) => {\n\n  const hstyle = {\n    // zIndex: 1,\n    // height: '100%',\n    width: '100%',\n    // color: 'red',\n    // borderColor: 'red',\n    // border : '0px solid',\n    borderBottom: '8px solid ' + hColor,\n    // borderLeft: '8px solid ' + ColorTable[vColor], \n    // borderBottom: '6px solid ' + undefined, \n    // borderBottom: '6px solid red', \n    // borderWidth: '19px'\n    // left: '50%',\n    position: 'relative',\n    // position: 'absolute',\n    visibility: hColor? 'visible':'hidden',\n    // float: 'left'\n    // transition: 'border-bottom 0.1s'\n  }\n\n  const vstyle = {\n    // zIndex: 2,\n    width: '100%',\n    height: '100%',\n    // width: '8px',\n    // height: '100%',\n    color: 'red',\n    // borderColor: 'red',\n    // borderStyle: 'solid',\n    borderLeft: '8px solid ' + vColor,\n    // borderLeft: '8px solid black', \n    // borderWidth: '19px'\n    left: '50%',\n    position: 'relative',\n    // float:'left',\n    // transition: 'border-left 0.1s'\n  }\n\n  const tdStyle = {\n    padding: '0px',\n    height: '8px',\n  }\n\n  return (\n    <td style={tdStyle}>\n\n      <div style={vstyle}>\n        <div style={hstyle} />\n      </div>\n\n    </td>\n  )\n}\n\nexport default SadariTD;\n","\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //최댓값은 제외, 최솟값은 포함\n  }\n\n\nexport { getRandomInt }","const timeout = (delay) => new Promise(res => setTimeout(res, delay))\nexport { timeout }","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Menu,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Feed,\n    Label,\n    Input,\n    Transition\n  } from 'semantic-ui-react'\n\nconst EditableInput = props => {\n  // We use hooks to declare \"initial\" states\n  const inputRef = useRef(null);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [text, setText] = useState(props.text);\n\n  function onClickOutSide(e) {\n    // Check if user is clicking outside of <input>\n    if (inputRef.current && !inputRef.current.contains(e.target)) {\n      setInputVisible(false); // Disable text input\n    }\n  }\n\n  useEffect(() => {\n    // Handle outside clicks on mounted state\n    if (inputVisible) {\n      document.addEventListener(\"mousedown\", onClickOutSide);\n    }\n\n    // This is a necessary step to \"dismount\" unnecessary events when we destroy the component\n    return () => {\n      document.removeEventListener(\"mousedown\", onClickOutSide);\n    };\n  });\n\n  return (\n    <React.Fragment>\n      {inputVisible ? (\n        <input\n          ref={inputRef} // Set the Ref\n          value={text} // Now input value uses local state\n          onChange={e => {\n            setText(e.target.value);\n          }}\n          style={{width:'100%'}}\n        />\n      ) : (\n        <Label onClick={() => setInputVisible(true)}>{text}</Label>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default EditableInput; // We got our component!\n","import React, { useCallback, useEffect, useState, useContext } from 'react'\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Sidebar,\n  Visibility,\n  Dropdown,\n  Feed,\n  Label,\n  Input,\n  Transition,\n  Message\n} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom'\n\nimport SadariTD from './SadariTD'\nimport ColorTable, { ColorTableRaw, getColorById, getColorRowById } from '../../utils/ColorTable'\nimport { getRandomInt } from '../../utils/Random'\nimport { timeout } from '../../utils/Timeout'\nimport EditableInput from './EditableText'\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport faker from 'faker'\nimport axios from 'axios'\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\n\n\n\n\nfaker.locale = \"ko\"\n\nconst SADARILENGTH = 60\n\nconst MainSadari = () => {\n\n  const { memberList } = useMemberList()\n\n  // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n  const members = memberList?.filter((member) => member.active === true)\n  const verticalCount = SADARILENGTH\n  const horizontalCount = members?.length\n  const connCount = (horizontalCount-1) * 5\n  const timeouts = []\n\n  const [lState, setLState] = useState([])\n  const [rState, setRState] = useState([])\n  const [cover, setCover] = useState(false)\n\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isOne, setIsOne] = useState(false)\n\n  const resetHandler = useCallback(async (e) => {\n    const arr = []\n\n    for (let i = 0; i < verticalCount; i++) {\n      let verticalArr = []\n\n      for (let j = 0; j < horizontalCount; j++) {\n        let node = { v: ColorTableRaw[1] }\n\n        verticalArr.push(node)\n      }\n      arr.push(verticalArr)\n    }\n\n    for (let i = 0; i < connCount; i++) {\n      const [vIndex, hIndex] = [getRandomInt(1, verticalCount - 1), getRandomInt(0, horizontalCount - 1)]\n\n      if (arr[vIndex - 1][hIndex]?.h || arr[vIndex + 1][hIndex]?.h) {\n        continue\n      }\n\n      if (hIndex > 0) {\n        if (arr[vIndex][hIndex - 1]?.h) {\n          continue\n        }\n      }\n\n      if (hIndex < horizontalCount - 1) {\n        if (arr[vIndex][hIndex + 1]?.h) {\n          continue\n        }\n      }\n\n      arr[vIndex][hIndex].h = ColorTableRaw[1]\n\n    }\n\n\n    setLState(arr)\n    setRState(new Array(horizontalCount).fill(null))\n\n\n  })\n  // resetHandler()\n\n\n  useEffect(() => {\n    resetHandler()\n  }, [memberList])\n\n  // useEffect(() => {\n  //   setRState(lState[verticalCount - 1]?.map((node) => node.v - 2))\n  // }, [lState])\n\n  const runHandler = useCallback(async (order) => {\n\n    if(members.length < 2) {\n      setIsOne(true)\n      return\n    }\n\n    setIsOne(false)\n\n    setIsPlaying(true)\n\n    const startId = order || 0\n    const endId = order + 1 || horizontalCount\n    const newRState = rState.slice()\n\n\n    for (let i = startId; i < endId; i++) {\n      const current = { h: i, v: 0, color: getColorRowById(members[i].id) }\n      for (let j = 0; j < verticalCount; j++) {\n\n        // if (!isPlaying) {\n        //   return\n        // }\n\n        const newLState = lState.slice()\n        newLState[current.v][current.h].v = current.color\n\n        if (newLState[current.v][current.h - 1]?.h) {\n          current.h = current.h - 1\n          newLState[current.v][current.h].h = current.color\n          newLState[current.v][current.h].v = current.color\n        } else if (newLState[current.v][current.h]?.h) {\n          newLState[current.v][current.h].h = current.color\n          current.h = current.h + 1\n          newLState[current.v][current.h].v = current.color\n        }\n\n        current.v = current.v + 1\n        setLState(newLState)\n        timeouts.push(await timeout(10))\n\n      }\n      newRState[current.h] = members[i]\n      setRState(newRState)\n    }\n\n    setIsPlaying(false)\n  })\n\n  const stopHandler = useCallback(async () => {\n    for (let i = 0; i < timeouts.length; i++) {\n      clearTimeout(timeouts[i])\n    }\n  })\n\n//   const onCreate = useCallback(\n//     (name) => {\n//         axios\n//             .post('/api/members', { name })\n//             .then(() => mutate())\n//     }, [membersData]\n// )\n\n// const onDelete = useCallback(\n//   (id) => {\n//       axios\n//           .delete('/api/members/' + id)\n//           .then(() => mutate())\n//   }, [membersData]\n// )\n\n\n  return (\n    <>\n\n\n      <Segment>\n        <table style={{ width: '100%', borderWidth: '0px', borderColor: 'gray', textAlignLast: 'center', borderSpacing: '0px', padding: '0px', tableLayout: 'fixed' }}>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.filter((member) => member.active === true).map((member, index) => (\n\n                  <th key={index}>\n                    <MemberItem member={member} onClick={() => runHandler(index)} />\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <tbody style={{position:'relative'}}>\n          {\n            cover &&\n            <Image style={{position:'absolute', zIndex:4, width:'100%', height: '60%', top:'20%'}} centered src=\"cover.png\" />\n\n          }\n\n            {\n              lState.map((horizontal, vIndex) => (\n                <tr key={vIndex} style={{position:'relative'}}>\n                  {horizontal.map((node, hIndex) => (\n                    <SadariTD\n                      vColor={node.v}\n                      hColor={node.h}\n                      key={hIndex}\n                    />\n                  ))}\n                </tr>\n              ))\n            }\n          </tbody>\n          <thead>\n            <tr>\n              {\n                rState?.map((member, index) => (\n                  <th key={index}>\n                    {member &&\n\n                  <MemberItem member={member}/>\n\n                    }\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n          <thead>\n            <tr>\n              {\n                members &&\n                members.map((_, index) => (\n\n                  <th key={index}>\n                    <EditableInput text={index + 1}></EditableInput>\n                  </th>\n                ))\n              }\n            </tr>\n          </thead>\n\n\n\n        </table>\n      </Segment>\n\n      <Segment style={{width:'100%'}}>\n      {\n        !isPlaying && <Button positive onClick={() => runHandler()}>시작</Button>\n      }\n      {\n        isPlaying && <Button disabled negative onClick={() => stopHandler()}>사다리가 진행 중 입니다</Button>\n      }\n      {\n        !isPlaying && <Button negative onClick={() => resetHandler()}>리셋</Button>\n      }\n\n<Button floated='right' secondary onClick={() => setCover(!cover)}>가림막 설정</Button>\n\n\n\n\n{\n        isOne &&\n        <Message warning>\n        <Message.Header>참가자 숫자 오류</Message.Header>\n        <p>참가자 숫자가 부족합니다.</p>\n      </Message>\n\n      }\n\n\n      <Message info>\n        <Message.Header>사다리 타기를 시작하려면</Message.Header>\n        <p>시작 버튼을 누르거나 참가자를 클릭하세요! 당첨 내용을 클릭하면 값을 바꿀 수 있습니다!</p>\n\n      </Message>\n\n\n\n</Segment>\n\n\n\n\n    </>\n  )\n}\n\nexport default MainSadari;\n","import React, { useState, useCallback, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Modal,\n    Input,\n    Form,\n    Message\n} from 'semantic-ui-react'\nimport { Link, Redirect } from 'react-router-dom'\nimport useInput from '../utils/useInput'\nimport fetcher from '../utils/fetcher'\nimport axios from 'axios'\nimport useSWR from 'swr'\nimport moment from 'moment'\nimport faker from 'faker'\n\nfaker.locale = \"ko\"\n\nconst Home = () => {\n\n    const { data: userData } = useSWR('/api/auth', fetcher)\n    const { data: usersData, mutate } = useSWR('/api/users', fetcher)\n\n    const [detail, setDetail] = useState(true)\n    const [open, setOpen] = useState(false)\n\n    const [name, onChangeName] = useInput('')\n    const [password, onChangePassword] = useInput('')\n\n    const [signUpError, setSignUpError] = useState(false)\n    const [signUpSuccess, setSignUpSuccess] = useState(false)\n\n    const onSubmit = useCallback(\n        (e) => {\n            e.preventDefault()\n\n            if (!name || !name.trim()) {\n                return\n            }\n\n            setSignUpError(false)\n            setSignUpSuccess(false)\n            axios\n                .post('/api/auth/join', { name, password })\n                .then(() => {\n                    setSignUpSuccess(true)\n                    mutate()\n                })\n                .catch((err) => {\n                    setSignUpError(true)\n                })\n\n        }, [name, password]\n    )\n\n    if (userData) {\n        return <Redirect to=\"/sadari\" />\n    }\n\n    // if (setSignUpSuccess) {\n    //     return <Redirect to=\"/sadari\" />\n    // }\n\n    return (\n        <>\n\n            <Segment\n                inverted\n                textAlign='center'\n                style={{ minHeight: 400, padding: '1em 0em' }}\n                vertical\n            >\n                <Container text>\n\n                    <Image\n                        size=\"large\"\n                        src='logo.png'\n                        centered\n                        style={{ padding: '1em' }}\n                    />\n                    {/* <Header>\n                        {cname}\n                    </Header> */}\n                    <Header\n                        as='h1'\n                        content='지금까지의 사다리타기는 잊어라!'\n                        inverted\n                    />\n\n                    <Header\n                        as='h1'\n                        content=\"편의성을 극대화한 '그냥' 사다리\"\n                        inverted\n                    />\n\n                    <Button primary size=\"huge\" style={{ margin: '1em' }} onClick={() => setOpen(true)}>\n                        일단 만들어 보기\n                        <Icon name='right arrow' />\n\n                    </Button>\n                </Container>\n            </Segment>\n\n            {\n                detail &&\n\n                <Segment style={{ padding: '4em 0em' }} vertical basic>\n                    <Grid container stackable verticalAlign='middle'>\n                        <Grid.Row>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    최고의 사용자 경험을 추구합니다\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    이름은 '그냥' 사다리지만 결코 '그냥' 만들진 않습니다.\n                                    매일매일 같은 사람들 이름을 입력하느라 손가락이 고생하지 않도록, 철수는 1번, 영희는 2번 하느라 헷갈릴 일 없게\n                                    '그냥' 사다리가 도와드리겠습니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    공유 가능한 사다리\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    사다리를 만들면서 입력한 패스코드를 공유하면 누구나 접근하여 사다리를 탈 수 있습니다.\n                                    참가자도 관리하고 결과도 공유해보면서 사다리를 타보세요!\n            </p>\n                            </Grid.Column>\n                            <Grid.Column floated='right' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari.png' />\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column textAlign='center'>\n                                <Button size='huge' style={{ margin: '2em' }} onClick={() => setDetail(false)}>알고 있어요</Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Grid.Column floated='left' width={6}>\n                                <Image bordered rounded size='massive' src='/sadari2.png' />\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    참가자 관리는 한 번만\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    다양한 게임들이 참가자 데이터를 공유합니다. 모임 친구들을 등록하고 다양한 게임을 진행해보세요!\n                                    '그냥' 사다리부터 안 뽑힌 사람 뽑는 '한 번씩 뽑기', 한번에 순서를 쫙! '순서 뽑기', 팀 나누기 애매할땐 '팀 나누기' 등 다양한 기능이 업데이트 예정입니다.\n            </p>\n                                <Header as='h3' style={{ fontSize: '2em' }}>\n                                    아바타로 더 잘 구분하자\n            </Header>\n                                <p style={{ fontSize: '1.33em' }}>\n                                    참가자를 추가하면서 아바타를 골라보세요. 랜덤으로 생성되는 수백개의 아바타가 여러분을 기다립니다.\n            </p>\n                            </Grid.Column>\n\n                        </Grid.Row>\n\n                    </Grid>\n                </Segment>\n            }\n\n            <Segment style={{ padding: '4em 0em' }} vertical basic padded>\n                <Card.Group stackable centered>\n                {/* <Link to=\"/sadari\"> */}\n                    {/* <Card>\n                        \n                        <Button primary fluid as={Link} to='/sadari' style={{ height: '100%', verticalAlign:'middle'}}>직접 입력해서 시작하기</Button>\n\n          \n                        \n                    </Card> */}\n                    {/* </Link> */}\n                    {\n                        usersData &&\n                        (usersData.map((user, i) => (\n                            <Card key={i}>\n                                {/* <Image src='ladder.png' wrapped ui={true} fluid></Image> */}\n\n                                <Card.Content>\n                                    <Image avatar floated='right' src={'https://avatars.dicebear.com/api/avataaars/' + user.name + '.svg'} />\n                                    <Card.Header>\n                                        {user.name}\n                        </Card.Header>\n                                    <CardDescription>\n                                    마지막 접속 : {user.loginAt && moment(user.loginAt).format('YYYY-MM-DD HH:mm:ss')}\n                        </CardDescription>\n                                </Card.Content>\n                                {/* <Card.Content extra>\n                        <Icon name='user' /> 10명의 참가자\n                    </Card.Content> */}\n                                <Card.Content extra>\n                                    <Button positive fluid as={Link} to={'/sadari?name=' + user.name}>\n                                        참가\n                        </Button>\n                                </Card.Content>\n                            </Card>\n                        )\n\n                        ))\n                    }\n\n\n                </Card.Group>\n\n            </Segment>\n\n\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                size='tiny'\n                style={{ margin: '1em' }}\n            >\n                <Header icon>\n                    <Icon name='road' />\n                    사다리 만들기      </Header>\n                <Modal.Content>\n                    <Form onSubmit={onSubmit} size='large'>\n\n                    <Form.Field>\n                    <Form.Input\n                            required\n                            fluid\n                            icon='road'\n                            iconPosition='left'\n                            placeholder='사다리 이름을 입력해 주세요'\n                            value={name}\n                            onChange={onChangeName}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                           \n                    <Form.Input\n                            required\n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='입장코드를 입력해 주세요'\n                            value={password}\n                            onChange={onChangePassword}\n                            style={{ marginBottom: '1em' }}\n                        />\n\n                    </Form.Field>\n                     \n\n                        <p>사다리 이름은 팀, 학습, 동아리 이름을 권장 드립니다. 예) 경영지원팀 사다리</p>\n                        <p>공유할 수 있는 입장 코드를 입력해주세요. 입장코드를 아는 사람들만 들어올 수 있습니다.</p>\n                        <p>입장코드는 암호화되어 관리자도 알 수 없습니다.</p>\n                        <p>민감한 개인정보는 사다리 이름, 입장 코드로 사용하지 마세요</p>\n\n                        <Grid textAlign=\"right\" >\n                            <Grid.Column>\n\n\n        <Button color='red' inverted onClick={() => setOpen(false)}>\n                                    <Icon name='remove' /> 취소\n        </Button>\n        <Button type=\"submit\" color='green' inverted>\n                                    <Icon name='checkmark' /> 생성\n        </Button>\n\n                            </Grid.Column>\n                        </Grid>\n\n\n                    </Form>\n\n                    {signUpError &&\n                        <Message negative>\n                            <Message.Header>\n                                사다리 생성 실패!!\n            </Message.Header>\n                            <p>\n                                중복된 이름입니다. 다른 이름을 넣어주세요.\n            </p>\n                        </Message>\n                    }\n                    {signUpSuccess &&\n                        <Message positive>\n                            <Message.Header>\n                                사다리 생성 성공!!\n            </Message.Header>\n                            <p>\n                                <mark><a href={\"/sadari?name=\" + name}>여기</a></mark>를 눌러 사다리로 이동합니다.\n            </p>\n                        </Message>\n                    }\n                </Modal.Content>\n                <Modal.Actions>\n\n                </Modal.Actions>\n            </Modal>\n\n\n        </>\n    )\n}\n\n\nexport default Home;\n","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Info = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 정보 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n                \n                <h2>\n                    업데이트 상황\n                </h2>\n\n                <ol>\n                    <li>정보 - 스타일 적용 예정</li>\n                    <li>참가자 관리 - 구현 완료</li>\n                    <li>그냥 사다리 - 구현 완료</li>\n                    <li>한 번씩 뽑기 - 구현 완료</li>\n                    <li>순서 뽑기 - 구현 완료</li>\n                    <li>팀 나누기 - 구현 완료</li>\n                    <li>설정 - 업데이트 예정</li>\n                </ol>\n\n                <p>\n                    사다리 개선 및 문제 제보 : axsim@naver.com\n                </p>\n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Info;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport MemberManager from '../components/memberManager'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n\n<MemberManager>\n                <SadariComponent />\n                </MemberManager>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList, setMemberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const [selectedMember, setSelectedMember] = useState(null)\n    const [visible, setVisible] = useState(false)\n\n    const onToggle = useCallback((id) => {\n        setMemberList(\n            activeMemberList.map(member =>\n                member.id === id ? { ...member, once: !member.once} : member\n            )\n        )\n    }, [activeMemberList])\n\n    const onSelect = useCallback(async() => {\n        const unSelectedMemberList = activeMemberList.filter((member) => member.once === false)\n\n        if (unSelectedMemberList.length) {\n\n            setVisible(true)\n            await timeout(1000)\n            setVisible(false)\n\n            const selectedIndex = Math.floor(Math.random() * unSelectedMemberList.length)\n            const selectedId = unSelectedMemberList[selectedIndex].id\n    \n            setSelectedMember(unSelectedMemberList[selectedIndex])\n            setMemberList(\n                memberList.map(member =>\n                    member.id === selectedId ? { ...member, once: true} : member\n                )\n            )\n        }\n\n\n    }, [activeMemberList])\n\n\n    const onReset = useCallback(() => {\n        setMemberList(memberList.map(member => {\n            return {...member, once: false}\n        }))\n    },\n        [activeMemberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    랜덤 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onSelect()} disabled={visible}>한명씩 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>안 뽑힌 사람 중 한명씩 뽑습니다!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! <br/> 뽑힌 이력을 지우려면 초기화 버튼을 누르거나 뽑힌 참가자 명단에서 이름을 클릭하세요.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n\n                <Segment raised textAlign=\"center\" style={{display: 'table', width: '100%', height:'150px', padding: '0'}} stacked inverted={visible}>\n                    {\n                        !visible && selectedMember && <MemberItem member={selectedMember} isBig={true} />\n                    }\n\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    아직 안 뽑힌 참가자\n                </Header>\n\n                <Segment stacked>\n                    {\n                        activeMemberList.filter((member) => member.once === false).map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n                   \n\n                </Segment>\n\n                <Header as='h3' textAlign='left'>\n                    뽑힌 참가자\n                </Header>\n\n\n                <Segment stacked>\n                    {\n                        activeMemberList.filter((member) => member.once === true).map((member, id) => \n                        <MemberItem member={member} onClick={onToggle} key={id} />\n                        )\n                    }\n\n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport OnceComponet from '../components/once'\nimport MemberManager from '../components/memberManager'\n\nconst Once = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OnceComponet />\n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n             */}\n\n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Once;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst OrderItem = ({ member, order }) => {\n    const { id, name, active } = member\n\n    const color = (id, active) => {\n        if (active === false ) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n    return (\n        <List.Item>\n                        <List.Content floated=\"right\">\n                        <Header as='h1' color={color(id, active)}>\n                    {order} 등\n                </Header>\n            </List.Content>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            {/* <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content> */}\n\n            <List.Content verticalAlign='middle' floated=\"left\">\n                <Header as='h1' color={color(id, active)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default OrderItem","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\nimport OrderItem from './OrderItem'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [shuffledData, setShuffledData] = useState([]);\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            setShuffledData([])\n            setVisible(true)\n            await timeout(2000)\n            setVisible(false)\n            setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setShuffledData([])\n    },\n        [memberList],\n    )\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    순서 뽑기\n            </Header>\n\n                    <Button positive onClick={() => onShuffle()} disabled={visible}>순서대로 뽑아보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button>\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>순서대로 뽑아보기 버튼을 눌러보세요!! 뽑은 결과를 없애려면 초기화 버튼을 누르면 됩니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {/* <List\n                        // celled\n                        divided\n                        // selection\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    > */}\n                        {\n                            shuffledData.map((member, id) => \n                            <OrderItem\n                                member={member}\n                                key={id}\n                                order={id+1}\n                                />\n                            )\n                        }\n                        {/* {\n                            shuffledData &&\n                            shuffledData.filter((member) => member.active === true).map((member, id) => (\n                                <OrderItem\n                                    user={member}\n                                    key={id}\n                                    order={id+1}\n                                />\n                            )\n                            )\n                        } */}\n                    {/* </List> */}\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport OrderComponent from '../components/order'\nimport MemberManager from '../components/memberManager'\n\nconst Order = () => {\n\n    return (\n        <>\n            <MemberManager>\n                <OrderComponent />\n            \n            </MemberManager>\n        </>\n    )\n}\n\n\nexport default Order;","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\n\nconst Setting = () => {\n\n    return (\n        <>\n            <SadariMenu>\n                <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message>\n            \n\n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default Setting;","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\nimport MemberItem from '../memberManager/MemberItem'\n\n\nconst TeamItem = ({ team, id }) => {\n\n\n\n\n    return (\n        <>\n                        <Header as='h3' textAlign='left'>\n                    {id + 1} 팀 : {team.length} 명\n            </Header>\n\n                <Segment stacked>\n                {\n        team &&\n        team.map((member) => (\n            <MemberItem \n            member={member}\n        />\n        )\n        )\n    }\n\n                </Segment>\n        </>\n\n    )\n}\n\nexport default TeamItem","import React, { useCallback, useState, useEffect } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message,\n    Transition\n} from 'semantic-ui-react'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\nimport { timeout } from '../../utils/Timeout'\n\nimport useMemberList from '../../contexts/memberList'\nimport TeamItem from './TeamItem'\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n\nconst OrderComponent = () => {\n\n\n    const { memberList } = useMemberList()\n    const activeMemberList = memberList.filter((member) => member.active === true)\n\n    // const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n    const [teamData, setTeamData] = useState([]);\n    const [options, setOptions] = useState([])\n    const [currentValue, setCurrentValue] = useState(1)\n    const [visible, setVisible] = useState(false)\n\n    const onShuffle = useCallback( async() => {\n        if (memberList) {\n\n            const newMemberList = memberList.filter((member) => member.active ===true)\n            // setShuffledData([])\n            // setVisible(true)\n            // await timeout(2000)\n            // setVisible(false)\n            // setShuffledData(shuffle(newMemberList))\n        }\n    },\n        [memberList],\n    )\n\n    const onReset = useCallback(() => {\n        setTeamData([])\n    },\n        [memberList],\n    )\n\n    const onChangeOptions = useCallback(() => {\n        const length = activeMemberList.length >= 8 ? 8 : activeMemberList.length\n        const newOptions = [...Array(length)].map((option, id) => {\n            return {key: id + 1, text: id + 1, value: id + 1}\n        })\n        setOptions(newOptions)\n    }, [memberList, currentValue])\n\n    const onSetTeam = useCallback(async() => {\n        \n        const newMemberList = activeMemberList\n        \n        shuffle(newMemberList)\n\n        const result = Array(currentValue)\n\n        const unit = newMemberList.length / currentValue\n\n        for (let i = 0; i < currentValue; i++) {\n            result[i] = newMemberList.slice(unit*i, unit*(i+1))\n        }\n        setTeamData([])\n        setVisible(true)\n        await timeout(2000)\n        setVisible(false)\n\n        setTeamData(result)\n\n    },\n        [memberList, currentValue],\n    )\n\n    useEffect(() => {\n        onChangeOptions()\n      }, [memberList])\n\n    return (\n\n        <>\n\n\n\n\n                <Grid.Column>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    팀 나누기\n            </Header>\n\n                    {/* <Button positive onClick={() => onShuffle()} disabled={visible}>팀 나눠보기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\" disabled={visible}>초기화</Button> */}\n\n            <Dropdown   \n                    onChange={(e, {value}) => setCurrentValue(value)}\n                    options={options}\n                    placeholder='팀 숫자를 골라주세요'\n                    selection\n                    value={currentValue}\n                    />\n                    \n\n                    <Button positive onClick={() => onSetTeam()}>개 팀으로 나누기</Button>\n                    <Button negative onClick={() => onReset()} floated=\"right\">초기화</Button>\n\n                    <Message info>\n        <Message.Header>모든 참가자를 순서대로 뽑습니다!!</Message.Header>\n        <p>되도록 같은 숫자로 맞추어서 뽑지만 팀 수에 따라 다소 차이가 생길 수 있습니다.</p>\n      </Message>\n      <Message info>\n        <Message.Header>참가자 이름을 입력 하거나 상태를 변경하려면?</Message.Header>\n        <p>화면 하단 참가자/대기자 명단을 사용하세요!!!</p>\n      </Message>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment stacked inverted={visible}>\n\n<List\n                divided\n                relaxed\n            >\n\n                    {\n                        teamData &&\n                        teamData.map((team, id) => (\n                            <TeamItem\n                                team={team}\n                                id={id}\n                                visible={!visible}\n                            />\n\n                        ))\n                        \n                    }\n\n                   </List>\n{\n    visible && <Image size='small' src='/loading.gif' centered />\n}\n                   \n\n                </Segment>\n\n                </Grid.Column>\n\n                        </>\n\n\n    )\n}\n\nexport default OrderComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Message\n} from 'semantic-ui-react'\nimport MemberManager from '../components/memberManager'\n\nimport SadariMenu from '../components/sadariMenu'\nimport TeamComponent from '../components/team'\n\nconst Team = () => {\n\n    return (\n        <>\n            <MemberManager>\n            <TeamComponent />\n\n            </MemberManager>\n\n                \n                {/* <Message negative>\n                    <Message.Header>\n                    임시 페이지 입니다.\n                    </Message.Header>\n                    <p>\n                        곧 업데이트 예정입니다.\n                    </p>\n                </Message> */}\n            \n\n        </>\n    )\n}\n\n\nexport default Team;","import React, { useCallback, useState } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic,\n    Form,\n} from 'semantic-ui-react'\n\nimport useInput from '../../utils/useInput'\n\n\nconst UserInsert = ({ onCreate }) => {\n    const [name, onChangeName, setName] = useInput('')\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault()\n\n            if (name) {\n                onCreate(name)\n                setName('')\n            }\n        },\n        [name],\n    )\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group unstackable>\n                <Form.Input\n                    placeholder=\"이름을 입력해 주세요\"\n                    value={name}\n                    onChange={onChangeName}\n                    required\n                    // fluid\n                    width={13}\n                    // unstackable\n                />\n                <Form.Button \n                    width={3} \n                    content='추가'\n                    // unstackable \n                    fluid\n                />\n\n            </Form.Group>\n\n        </Form>\n\n    )\n}\n\nexport default UserInsert","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport ColorTable, { getColorById } from '../../utils/ColorTable'\n\n\nconst UserItem = ({ user, onActivate, onDeActivate, onDelete }) => {\n    const { id, name, status } = user\n\n    const color = (id, status) => {\n        if (status === 0) {\n            return ColorTable[1]\n        } else {\n            return getColorById(id)\n        }\n    }\n\n\n    return (\n        <List.Item>\n            <Image size=\"mini\" floated='left' avatar src={'https://avatars.dicebear.com/api/avataaars/' + name + '.svg'} />\n\n            <List.Content floated='right' verticalAlign='middle'>\n                {(status === 1) &&\n                    <Button onClick={() => onDeActivate(id)}>\n                        대기로 전환\n                </Button>\n                }\n                {(status === 0) &&\n                    <Button positive onClick={() => onActivate(id)}>\n                        참가\n                            </Button>\n                }\n                {(status === 0) &&\n                    <Button negative onClick={() => onDelete(id)}>\n                        삭제\n                            </Button>\n                }\n\n\n            </List.Content>\n            <List.Content verticalAlign='middle'>\n                <Header as='h1' color={color(id, status)}>\n                    {name}\n                </Header>\n            </List.Content>\n        </List.Item>\n    )\n}\n\nexport default UserItem","import React, { useCallback } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\nimport UserInsert from './UserInsert'\nimport UserItem from './UserItem'\n\n\nimport fetcher from '../../utils/fetcher'\nimport useSWR from 'swr'\n\nimport axios from 'axios'\n\nconst UserComponent = () => {\n\n    const { data: membersData, mutate } = useSWR('/api/members', fetcher)\n\n    const onCreate = useCallback(\n        (name) => {\n            axios\n                .post('/api/members', { name })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 1 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n    const onDeActivate = useCallback(\n        (id) => {\n            axios\n                .patch('/api/members/' + id, { status: 0 })\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n    const onDelete = useCallback(\n        (id) => {\n            axios\n                .delete('/api/members/' + id)\n                .then(() => mutate())\n        }, [membersData]\n    )\n\n\n\n\n\n    return (\n\n        <Grid>\n            <Grid.Column style={{ maxWidth: 1000 }}>\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    사다리 참가자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 1).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                    <UserInsert onCreate={onCreate} />\n                </Segment>\n\n                <Header as='h1' textAlign='center' style={{ margin: '1em' }}>\n                    대기자\n            </Header>\n                <Segment stacked>\n                    <List\n                        // celled\n                        divided\n                        // selection\n                        size=\"massive\"\n                        // inverted\n                        relaxed\n                    // verticalAlign=\"middle\"\n                    >\n                        {\n                            membersData &&\n                            membersData.filter((user) => user.status === 0).map((user) => (\n                                <UserItem\n                                    user={user}\n                                    key={user.id}\n                                    onActivate={onActivate}\n                                    onDeActivate={onDeActivate}\n                                    onDelete={onDelete}\n                                />\n                            )\n                            )\n                        }\n                    </List>\n                </Segment>\n            </Grid.Column>\n        </Grid>\n\n\n\n    )\n}\n\nexport default UserComponent","import React, { useState, useRef, useCallback, useMemo } from 'react'\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    List,\n    Segment,\n    Sidebar,\n    Visibility,\n    Dropdown,\n    Card,\n    CardDescription,\n    Label,\n    Input,\n    Statistic\n} from 'semantic-ui-react'\n\nimport SadariMenu from '../components/sadariMenu'\nimport SadariComponent from '../components/sadari'\nimport UserComponent from '../components/user'\n\nconst MainSadari = () => {\n\n    return (\n        <>\n            <SadariMenu>\n\n                <UserComponent />\n\n            \n         \n            </SadariMenu>\n        </>\n    )\n}\n\n\nexport default MainSadari;","import React from 'react'\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport SadariMenu from './components/sadariMenu'\nimport MemberManager from './components/memberManager'\n\nimport SadariComponent from './components/sadari'\n\nimport Home from './pages/Home'\nimport Info from './pages/Info'\nimport MainSadari from './pages/MainSadari'\nimport Once from './pages/Once'\nimport Order from './pages/Order'\nimport Setting from './pages/Setting'\nimport Team from './pages/Team'\nimport User from './pages/User'\nimport { MemberListProvider } from './contexts/memberList'\n\n\nconst App = () => {\n  return (\n    <MemberListProvider>\n    <SadariMenu>\n\n\n    <Switch>\n      <Route exact path=\"/\">\n      <MainSadari />\n      </Route>\n      <Route exact path=\"/info\">\n        <Info />\n      </Route>\n      <Route exact path=\"/member\">\n        <User />\n      </Route>\n      <Route exact path=\"/sadari\">\n        <MainSadari />\n      </Route>\n      <Route exact path=\"/once\">\n        <Once />\n      </Route>\n      <Route exact path=\"/order\">\n        <Order />\n      </Route>\n      <Route exact path=\"/team\">\n        <Team />\n      </Route>\n      <Route exact path=\"/setting\">\n        <Setting />\n      </Route>\n    </Switch>\n\n\n    </SadariMenu>\n\n    </MemberListProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}